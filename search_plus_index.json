{"./":{"url":"./","title":"简介","keywords":"","body":"简介 | Introduce security-plus（简称SP）框架是专门为java后台管理系统而诞生的完整系统,初见倾心,再见动情! [success] 目标和愿景 安全便捷,开箱即用,灵活方便可扩展. 优点 | Advantages 支持多企业管理：不仅仅适用某一家企业内部管理,还可以拓展成多企业模式,轻松发展成XX平台; 支持无限制代理：功能权限可自由分配,支持病毒式发展下级平台; 完整的权限体系：基于 rbac 模式实现功能权限,基于 多租户模式 实现数据权限,灵活有效地控制权限; 递归分配权限：天然支持递归权限树,功能权限和数据权限双重保证系统隐私安全; 强大代码生成器：一键生成后端和前端全部代码,甚至于测试文件,此外也支持自定义模板逻辑; 清晰的目录结构：基于 maven 多模块项目,构建标准的 spring-boot 目录结构,有利于降低学习成本; 良好的开发规范：遵循阿里巴巴java开发手册规范,完整的开发测试,提供高质量的软件产品服务; 友好的代码注释: 细致但不繁琐的注释让您阅读源码以及二次开发不再吃力,开发何苦为难开发; druid数据库监控: 随时随地查看数据库连接信息,方便 dba 监控并调优数据库 sql; swagger接口文档: 自动生成 api 接口文档,方便调试开发,降低对接工作时的沟通成本; 快速预览 | Preview 技术选型 | Technology 基础框架: spring-boot ORM框架: Mybatis-Plus Born To Simplify Development 安全框架: Apache Shiro™ Simple. Java. Security. 模板框架: Beetl 新一代Java模板引擎典范 前端框架: hplus 后台主题UI框架 项目结构 | Architecture security-plus 雪之梦后台权限管理系统 ├── security-plus-parent 父项目: 负责维护父子项目关系,本身无任何代码 ├── security-plus-core 核心项目: 子项目,是基础模块,集成常用工具类 └── security-plus-browser 浏览器项目: 子项目,是后端管理系统项目,依赖于核心项目 ├── log ├── src/ | ├── main/ | | ├── java/ | | | └── com.snowdreams1006.securityplus.browser/ | | | ├── base/ 公共配置类以及常用工具类等 | | | ├── module/ 具体业务模块 | | | └── SecurityPlusBrowserApplication 程序入口启动类 | | └── resources/ | | ├── sql 代码生成器产出 sql 以及程序初始化 sql | | ├── static/ 静态资源目录 | | ├── templates/ 模板页面 | | ├── application.yml 总配置文件 | | ├── application-dev.yml 开发环境配置文件 | | ├── application-prod.yml 生产环境配置文件 | | ├── application-test.yml 测试环境配置文件 | | └── banner.txt 程序启动 banner | └── test/ | └── java/ | └── com.snowdreams1006.securityplus.browser/ | ├── base/ | └── module/ ├── target/ └── pom.xml 系统环境 | Environment maven 3.5.3+ jdk 1.8.0_161+ MySQL 5.7+ 下载地址 | Download 最物流企业用户点此访问 svn 服务器 其他用户后续访问 github 服务器 SP 框架暂未开放下载,如有相关需求,欢迎随时联系我! 本地部署 | Documentation 下载 security-plus 源代码,并导入到 Eclipse 或者 IDEA 等 ide 开发工具; 创建 security-plus 数据库,执行 mysql.sql 文件,初始化基本数据; 修改 application-*.yml 配置文件，更新 MySQL连接信息以及其他配置; 在 security-plus-parent 项目下，执行 mvn clean install 下载安装相关依赖; 在 security-plus-browser 项目下,右键 SecurityPlusBrowserApplication 启动; security-plus-browser 项目的默认访问路径：http://localhost:8080/index.page SP 默认账号密码: admin/123456 文档 | Documentation security-plus.pdf pdf 文件 security-plus.mobi mobi 文件 security-plus.epub ePub 文件 如需获取完整版文档,欢迎随时联系我! 版权 | License SP 使用Apache License 2.0开源协议,请放心使用,如有顾虑点击查看协议详情 交流反馈 | Feedback github 主页: snowdreams1006 交流提问区: security-plus-issues 我的QQ号: 513238368 捐赠 | Donate 您的支持是我创作的最大动力,感谢您的肯定! 致谢 | Thanks Java实现权限管理（上） Java实现权限管理（下） RBAC打造通用web管理权限 Linux权限管理之基本权限 Linux权限管理之特殊权限 Java开发企业级权限管理系统 Spring Security开发安全的REST服务 2小时学会Spring Boot Spring Boot进阶之Web进阶 SpringBoot开发常用技术整合 guns 后台管理系统 dp-BOOT 人人开源 参与贡献 | Distribute 维护文档: security-plus.github.io,欢迎参与翻译和修订; 开发文档: security-plus,欢迎志同道合小伙伴加入; 欢迎各路好汉一起来参与完善 security-plus，我们期待你的PR！ Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2019-02-01 23:17:33 "},"docs/use/":{"url":"docs/use/","title":"快速入门","keywords":"","body":"快速入门 如果你看到这里,说明你已初步认同 security-plus权限框架,首先感谢您的认可,下面请和我一起慢慢熟悉雪之梦权限系统! 本章目标 说明: 本章节以 idea 开发工具为例,讲解如何下载安装开发工具,导入svn 到本地空间,如何启动项目 准备好了吗? let's go! Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 20:51:44 "},"docs/use/prepare.html":{"url":"docs/use/prepare.html","title":"搭建环境","keywords":"","body":"搭建环境 工欲善其事必先利其器,首先先选择您的开发工具,作者用的是idea,下面就以ida为例搭建开发环境 下载安装idea,选择系统版本,下面作者以 mac 为例,window也同样适用; 开始下载,拼网速的时候到了,耐心等待... 开始安装 idea ,mac 直接拖动安装, window 下一步...,最后启动 idea 软件; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 17:29:58 "},"docs/use/download.html":{"url":"docs/use/download.html","title":"导入项目","keywords":"","body":"导入项目 本文以 svn 为例说明如何下载项目并检出到本地工作空间 打开 idea 找到设置页面,设置下 subversion, 用于连接 svn 服务器; 在 VCS 菜单栏开启 svn 版本控制,连接到 svn 仓库,并检出项目到本地工作空间; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 17:29:33 "},"docs/use/experience.html":{"url":"docs/use/experience.html","title":"运行项目","keywords":"","body":"体验项目 终于可以运行项目了,spring-boot 标准启动方式,默认访问地址: http://localhost:8080/login.page 在本地工作空间中找到项目, 再次启动 idea 并打开 security-plus-parent 项目,等待... 启动项目,打开浏览器体验 http://localhost:8080/login.page; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 17:29:02 "},"docs/practice/":{"url":"docs/practice/","title":"实战演练","keywords":"","body":"实战演练 相信你已经成功运行 security-plus 项目,现在您需要的是如何开发自己的业务,本章节以最简单的 增删改查 基本功能作为切入点,带您进入 security-plus 开发体系中... 本章目标 说明: 以某简单业务为例,讲解如何实现 增删改查 基本功能 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 20:52:03 "},"docs/practice/normal.html":{"url":"docs/practice/normal.html","title":"常规开发","keywords":"","body":"常规开发 开发流程: 后端代码 -> 前端页面 -> 分配权限 -> 开发完成 下面以 车辆类型 为例,说明如何进行 增删改查 简单业务,效果如图 根据业务特点分析,发现 车辆类型 功能和 角色 功能基本类似,所以打算采用复制粘贴的方式快速修改完成! Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:55:45 "},"docs/practice/normal/db.html":{"url":"docs/practice/normal/db.html","title":"db","keywords":"","body":"db 作者以 mysql workbench 客户端为例,首先找到 sys_role 角色表,并查看表结构; 按需选择 sys_role 数据表字段,右键 copy ,准备复制到 sys_vehicle_type 数据表; 新建 sys_vehilce_type 数据表,并粘贴到该数据表中; 根据实际业务修改数据表结构; sys_vehicle_type CREATE TABLE `sys_vehicle_type` ( `id` bigint(11) unsigned NOT NULL AUTO_INCREMENT COMMENT '车辆类型id', `parent_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '直接上级id,0表示无上级', `level` varchar(255) NOT NULL DEFAULT '' COMMENT '层级', `num` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '序号', `type` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '类型:1表示牵引车,2表示半挂车,3表示全挂车', `name` varchar(50) NOT NULL DEFAULT '' COMMENT '名称', `remark` varchar(255) NOT NULL DEFAULT '' COMMENT '备注', `state` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '状态,1启用中,2已冻结,3已删除', `is_deleted` tinyint(1) unsigned NOT NULL DEFAULT '0' COMMENT '逻辑删除配置,1表示删除,0表示未删除', `version` int(11) unsigned NOT NULL DEFAULT '0' COMMENT '乐观锁标志位', `owner_enterprise_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '所有者企业 id', `owner_enterprise_name` varchar(50) NOT NULL DEFAULT '' COMMENT '所有者企业名称', `owner_user_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '所有者用户 id', `owner_user_name` varchar(50) NOT NULL DEFAULT '' COMMENT '所有者用户名称', `create_enterprise_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建企业 id', `create_enterprise_name` varchar(50) NOT NULL DEFAULT '' COMMENT '创建企业名称', `modified_enterprise_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '更新企业 id', `modified_enterprise_name` varchar(50) NOT NULL DEFAULT '' COMMENT '更新企业名称', `create_user_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '创建用户 id', `create_user_name` varchar(50) NOT NULL DEFAULT '' COMMENT '创建用户名称', `modified_user_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '更新用户 id', `modified_user_name` varchar(50) NOT NULL DEFAULT '' COMMENT '更新企业名称', `tenant_id` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '租户 id\\n', `tenant_type` bigint(11) unsigned NOT NULL DEFAULT '0' COMMENT '租户类型,1表示企业租户,2表示个人租户\\n', `tenant_name` varchar(50) NOT NULL DEFAULT '' COMMENT '租户名称', `gmt_create` datetime DEFAULT NULL COMMENT '创建时间', `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`), UNIQUE KEY `id_UNIQUE` (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=303 DEFAULT CHARSET=utf8 COMMENT='系统级别车辆类型表'; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 09:39:16 "},"docs/practice/normal/entity.html":{"url":"docs/practice/normal/entity.html","title":"entity","keywords":"","body":"entity 更新 svn 服务器 正式coding前,先保证当前工作空间中代码是最新状态,所以选中可能会更新的目录,右键 subversion -> update Directory... entity 实体类 entity 实体类中各属性与数据表字段一一对应对应，基本规约如下: entity 继承统一基类 BaseEntity ,可根据实际情况决定是否重写某些属性; entity 添加 @Getter @Setter @Builder @NoArgsConstructor @TableName 等注解简化实体类; 类名：大驼峰命名 规范,默认注释同数据表注释,并添加 @author 和 @date 注解说明; 属性名：小驼峰命名规范,默认注释同数据表字段,并添加 @TableField @JsonView @ApiModelProperty 等注解说明; 打开 idea 开发工具,找到 SysRole 角色实体类,右键复制并重命名 SysVehicleType; 重命名成功后系统提示是否加入版本控制,确定,不然每一次新增文件都会提示! 同时打开 SysRole 和 SysVehicleType 文件,选中 SysVehicleType 并右键 Split-vertically 分为左右两个窗口,方便复制粘贴; 根据数据库字段一一映射实体类的属性; SysVehicleType.java package com.snowdreams1006.securityplus.browser.module.system.entity; import com.baomidou.mybatisplus.annotations.TableField; import com.baomidou.mybatisplus.annotations.TableName; import com.baomidou.mybatisplus.mapper.SqlCondition; import com.fasterxml.jackson.annotation.JsonView; import com.snowdreams1006.securityplus.browser.base.entity.BaseEntity; import io.swagger.annotations.ApiModelProperty; import lombok.*; /** * 系统级别车辆类型表 entity * * @author snowdreams1006 * @date 2018-08-07 */ @Getter @Setter @Builder @NoArgsConstructor @AllArgsConstructor @ToString(callSuper = true) @EqualsAndHashCode(callSuper = true) @TableName(\"sys_vehicle_type\") public class SysVehicleType extends BaseEntity { /** * 上级角色id,0表示无上级,简单视图 */ @TableField(\"parent_id\") @JsonView(SimpleView.class) @ApiModelProperty(value = \"上级角色id\") private Long parentId; /** * 层级,详细视图 */ @TableField(value = \"level\", condition = SqlCondition.LIKE) @JsonView(DetailView.class) @ApiModelProperty(value = \"层级\") private String level; /** * 排序,简单视图 */ @TableField(\"num\") @JsonView(SimpleView.class) @ApiModelProperty(value = \"排序\") private Integer num; /** * 类型,简单视图 */ @TableField(\"type\") @JsonView(SimpleView.class) @ApiModelProperty(value = \"类型\") private Integer type; /** * 名称,简单视图 */ @TableField(value = \"name\", condition = SqlCondition.LIKE) @JsonView(SimpleView.class) @ApiModelProperty(value = \"名称\") private String name; } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:07:01 "},"docs/practice/normal/param.html":{"url":"docs/practice/normal/param.html","title":"param","keywords":"","body":"param 参数类的设计初衷在于区分出实体类和参数类是不一样的! 例如创建时间,修改时间,操作人员等这些字段不能由前端传递给后端,而是应该后端自动判断生成,所以抽象出 param 模型,基本规则如下: param 继承统一基类 BaseParam ,可根据实际情况决定是否重写某些属性; param 添加 @Getter @Setter @Builder @NoArgsConstructor @ApiModel 等注解简化参数类; 类名：大驼峰命名+Param 规范,默认注释业务模型,并添加 @author 和 @date 注解说明; 属性名：小驼峰命名规范,默认注释业务模型,并添加 @NotNull @Min @ApiModelProperty 等注解说明; 找到 SysRoleParam 角色参数类,并复制重命名为 SysVehicleTypeParam,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeParam 参数类; SysVehicleTypeParam.java package com.snowdreams1006.securityplus.browser.module.system.param; import com.snowdreams1006.securityplus.browser.base.param.BaseParam; import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.*; import org.hibernate.validator.constraints.Length; import org.hibernate.validator.constraints.NotBlank; import javax.validation.constraints.Min; import javax.validation.constraints.NotNull; /** * 车辆类型 param * * @author snowdreams1006 * @date 2018-08-07 */ @Getter @Setter @Builder @NoArgsConstructor @AllArgsConstructor @ToString(callSuper = true) @EqualsAndHashCode(callSuper = true) @ApiModel(description = \"车辆类型参数\") public class SysVehicleTypeParam extends BaseParam { /** * 直接上级id,0表示无上级 */ @NotNull(message = \"上级车辆类型id不存在\") @Min(value = 0, message = \"上级车辆类型id必须大于零\") @ApiModelProperty(value = \"直接上级id\", required = true) private Long parentId; /** * 排序 */ @NotNull(message = \"展示顺序不存在\") @Min(value = 0, message = \"展示顺序必须大于零\") @ApiModelProperty(value = \"排序\", required = true) private Integer num; /** * 类型 */ @NotNull(message = \"类型不存在\") @Min(value = 0, message = \"类型必须大于零\") @ApiModelProperty(value = \"类型\", required = true) private Integer type; /** * 名称 */ @NotBlank(message = \"车辆类型名称不存在\") @Length(min = 1, max = 50, message = \"车辆类型名称长度需要在1-50个字符之间\") @ApiModelProperty(value = \"名称\", required = true) private String name; } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 08:46:35 "},"docs/practice/normal/query.html":{"url":"docs/practice/normal/query.html","title":"query","keywords":"","body":"query 顾名思义是对查询条件进行抽象而成的 query 模型,用于解决 Map 传递参数引发的诸多问题,基本规则如下: query 继承统一基类 BaseQuery ,可根据实际情况决定是否重写某些属性; query 添加 @Getter @Setter @Builder @NoArgsConstructor 等注解简化参数类; 类名：大驼峰命名+Query 规范,默认注释业务模型,并添加 @author 和 @date 注解说明; 属性名：小驼峰命名规范,默认注释业务模型; 找到 SysRoleQuery 角色查询类,并复制重命名为 SysVehicleTypeQuery,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeQuery 查询类; SysVehicleTypeQuery.java package com.snowdreams1006.securityplus.browser.module.system.query; import com.snowdreams1006.securityplus.browser.base.query.BaseQuery; import lombok.*; import java.util.List; /** * 车辆类型 query * * @author snowdreams1006 * @date 2018-08-07 */ @Getter @Setter @Builder @NoArgsConstructor @AllArgsConstructor @ToString(callSuper = true) @EqualsAndHashCode(callSuper = true) public class SysVehicleTypeQuery extends BaseQuery { /** * 名称 */ private String name; /** * 类型 */ private List type; } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:12:03 "},"docs/practice/normal/dto.html":{"url":"docs/practice/normal/dto.html","title":"dto","keywords":"","body":"dto 参数类的设计初衷在于区分出实体类和传输类是不一样的! 例如 ztree 节点中某节点是否选中,是否是父节点等信息,这些都是动态信息,不适合永久存储数据库,因此抽象出 dto 模型动态解决此类需求,基本规则如下: dto 继承自己的实体类 entity ,根据实际情况扩展某些属性或新增属性; dto 添加 @Getter @Setter @NoArgsConstructor @ApiModel 等注解简化参数类; 类名：大驼峰命名+Dto 规范,默认注释业务模型,并添加 @author 和 @date 注解说明; 属性名：小驼峰命名规范,默认注释业务模型; 找到 SysRoleDto 角色传输类,并复制重命名为 SysVehicleTypeDto,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeDto 传输类; SysVehicleTypeDto package com.snowdreams1006.securityplus.browser.module.system.dto; import com.fasterxml.jackson.annotation.JsonView; import com.google.common.collect.Lists; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import io.swagger.annotations.ApiModel; import io.swagger.annotations.ApiModelProperty; import lombok.*; import org.springframework.beans.BeanUtils; import java.util.List; import java.util.Objects; /** * 车辆类型 dto * * @author snowdreams1006 * @date 2018-05-17 */ @Getter @Setter @NoArgsConstructor @AllArgsConstructor @ToString(callSuper = true) @EqualsAndHashCode(callSuper = true) @ApiModel(description = \"车辆类型对象\") public class SysVehicleTypeDto extends SysVehicleType { /** * 是否为根节点,简单视图 */ @JsonView(SimpleView.class) @ApiModelProperty(value = \"是否为根节点\") private Boolean isRoot; /** * 是否为父节点,简单视图 */ @JsonView(SimpleView.class) @ApiModelProperty(value = \"是否为父节点\") private Boolean isParent; /** * 是否选中,详细视图 */ @JsonView(DetailView.class) @ApiModelProperty(value = \"是否选中\") private Boolean checked; /** * 是否展开,详细视图 */ @JsonView(DetailView.class) @ApiModelProperty(value = \"是否展开\") private Boolean open; /** * 子车辆类型,详细视图 */ @JsonView(DetailView.class) @ApiModelProperty(value = \"子车辆类型\") private List children = Lists.newArrayList(); /** * 默认顶级车辆类型 */ public static SysVehicleTypeDto createRoot() { SysVehicleTypeDto root = new SysVehicleTypeDto(); root.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); root.setParentId(Long.valueOf(LevelTools.ROOT_LEVEL)); root.setLevel(LevelTools.ROOT_LEVEL); root.setName(LevelTools.ROOT_NAME); root.setType(Integer.valueOf(LevelTools.ROOT_LEVEL)); root.setNum(Integer.valueOf(LevelTools.ROOT_LEVEL)); root.setIsRoot(true); root.setIsParent(true); root.setChecked(true); root.setOpen(true); return root; } /** * 将车辆类型entity适配成车辆类型dto * * @param sysVehicleType 车辆类型entity * @return 车辆类型dto */ public static SysVehicleTypeDto entityAdaptDto(SysVehicleType sysVehicleType) { //若接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleType)) { return null; } SysVehicleTypeDto sysVehicleTypeDto = new SysVehicleTypeDto(); BeanUtils.copyProperties(sysVehicleType, sysVehicleTypeDto); return sysVehicleTypeDto; } /** * 将车辆类型entity适配成车辆类型param * * @param sysVehicleType 车辆类型entity * @return 车辆类型param */ public static SysVehicleTypeParam entityAdaptParam(SysVehicleType sysVehicleType) { //若接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleType)) { return null; } SysVehicleTypeParam sysVehicleTypeParam = new SysVehicleTypeParam(); BeanUtils.copyProperties(sysVehicleType, sysVehicleTypeParam); return sysVehicleTypeParam; } /** * 将车辆类型dto适配成车辆类型entity * * @param sysVehicleTypeDto 车辆类型 dto * @return 车辆类型entity */ public static SysVehicleType dtoAdaptEntity(SysVehicleTypeDto sysVehicleTypeDto) { //若 接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleTypeDto)) { return null; } SysVehicleType sysVehicleType = new SysVehicleType(); BeanUtils.copyProperties(sysVehicleTypeDto, sysVehicleType); return sysVehicleType; } /** * 将车辆类型dto适配成车辆类型param * * @param sysVehicleTypeDto 车辆类型 dto * @return 车辆类型entity */ public static SysVehicleTypeParam dtoAdaptParam(SysVehicleTypeDto sysVehicleTypeDto) { //若 接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleTypeDto)) { return null; } SysVehicleTypeParam sysVehicleTypeParam = new SysVehicleTypeParam(); BeanUtils.copyProperties(sysVehicleTypeDto, sysVehicleTypeParam); return sysVehicleTypeParam; } /** * 将车辆类型param适配成车辆类型entity * * @param sysVehicleTypeParam 车辆类型param * @return 车辆类型entity */ public static SysVehicleType paramAdaptEntity(SysVehicleTypeParam sysVehicleTypeParam) { //若 接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleTypeParam)) { return null; } SysVehicleType sysVehicleType = new SysVehicleType(); BeanUtils.copyProperties(sysVehicleTypeParam, sysVehicleType); return sysVehicleType; } /** * 将车辆类型param适配成车辆类型dto * * @param sysVehicleTypeParam 车辆类型param * @return 车辆类型dto */ public static SysVehicleTypeDto paramAdaptDto(SysVehicleTypeParam sysVehicleTypeParam) { //若 接收null,则返回 null, 则具体逻由调用者处理 if (Objects.isNull(sysVehicleTypeParam)) { return null; } SysVehicleTypeDto sysVehicleTypeDto = new SysVehicleTypeDto(); BeanUtils.copyProperties(sysVehicleTypeParam, sysVehicleTypeDto); return sysVehicleTypeDto; } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:13:34 "},"docs/practice/normal/mapper.html":{"url":"docs/practice/normal/mapper.html","title":"mapper","keywords":"","body":"mapper 基本规则如下: mapper 继承自己的基类 BaseMapper ,根据实际情况扩展自定义sql语句; 类名：大驼峰命名+Mapper 规范,默认注释同数据表注释,并添加 @author 和 @date 注解说明; 找到 SysRoleMapper 角色 mapper 类,并复制重命名为 SysVehicleTypeMapper,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeMapper 接口; SysVehicleTypeMapper.java package com.snowdreams1006.securityplus.browser.module.system.mapper; import com.baomidou.mybatisplus.mapper.BaseMapper; import com.baomidou.mybatisplus.plugins.Page; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import org.apache.ibatis.annotations.Param; import java.util.List; /** * 系统级别车辆类型表 mapper * * @author snowdreams1006 * @date 2018-08-07 */ public interface SysVehicleTypeMapper extends BaseMapper { /** * 查询当前车辆类型的后代车辆类型 * * @param parent 当前车辆类型 * @param sysVehicleTypeQuery 后代车辆类型过滤条件 * @return 后代车辆类型 */ List listDescendant(@Param(\"parent\") SysVehicleTypeDto parent, @Param(\"sysVehicleTypeQuery\") SysVehicleTypeQuery sysVehicleTypeQuery); /** * 查询当前车辆类型的子车辆类型 * * @param parent 当前车辆类型 * @param sysVehicleTypeQuery 子车辆类型过滤条件 * @return 子车辆类型 */ List listChildren(@Param(\"parent\") SysVehicleTypeDto parent, @Param(\"sysVehicleTypeQuery\") SysVehicleTypeQuery sysVehicleTypeQuery); /** * 查询当前车辆类型的子车辆类型统计值 * * @param parent 当前车辆类型 * @param sysVehicleTypeQuery 子车辆类型过滤条件 * @return 子车辆类型统计值 */ Integer countChildren(@Param(\"parent\") SysVehicleTypeDto parent, @Param(\"sysVehicleTypeQuery\") SysVehicleTypeQuery sysVehicleTypeQuery); /** * 分页查询车辆类型 * * @param page 分页条件 * @param parent 当前车辆类型 * @param sysVehicleTypeQuery 查询条件 * @return 车辆类型列表 */ List listPage(@Param(\"page\") Page page, @Param(\"parent\") SysVehicleTypeDto parent, @Param(\"sysVehicleTypeQuery\") SysVehicleTypeQuery sysVehicleTypeQuery); /** * 条件查询车辆类型 * * @param sysVehicleTypeQuery 查询条件 * @return 车辆类型列表 */ List listCondition(@Param(\"sysVehicleTypeQuery\") SysVehicleTypeQuery sysVehicleTypeQuery); } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:14:31 "},"docs/practice/normal/xml.html":{"url":"docs/practice/normal/xml.html","title":"xml","keywords":"","body":"xml 基本规则如下: resultMap 的 id=entity+BaseResultMap,例如 id=\"sysVehicleTypeBaseResultMap\"; sql 的 id=entityBaseColumns,例如 sysVehicleTypeBaseColumns 找到 SysRoleMapper.xml 角色 mapper.xml 文件,并复制重命名为 SysVehicleTypeMapper.xml,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeMapper.xml 文件; SysVehicleTypeMapper.xml id, parent_id, level, num, type, name, remark, state, is_deleted, version, owner_enterprise_id, owner_enterprise_name, owner_user_id, owner_user_name, create_enterprise_id, create_enterprise_name, modified_enterprise_id, modified_enterprise_name, create_user_id, create_user_name, modified_user_id, modified_user_name, tenant_id, tenant_type, tenant_name, gmt_create, gmt_modified select from sys_vehicle_type is_deleted = 0 AND state != 3 AND level like CONCAT(\"%\",#{parent.level},\".\",#{parent.id},\"%\") AND name like CONCAT(\"%\",TRIM(#{sysVehicleTypeQuery.name}),\"%\") 0\"> AND type IN #{typeItem} AND gmt_create BETWEEN #{sysVehicleTypeQuery.startDate} AND #{sysVehicleTypeQuery.endDate} order by level ,num ASC select from sys_vehicle_type is_deleted = 0 AND state != 3 AND parent_id = #{parent.id} AND name like CONCAT(\"%\",TRIM(#{sysVehicleTypeQuery.name}),\"%\") 0\"> AND type IN #{typeItem} AND gmt_create BETWEEN #{sysVehicleTypeQuery.startDate} AND #{sysVehicleTypeQuery.endDate} order by level ,num ASC select count(*) from sys_vehicle_type is_deleted = 0 AND state != 3 AND parent_id = #{parent.id} AND name like CONCAT(\"%\",TRIM(#{sysVehicleTypeQuery.name}),\"%\") 0\"> AND type IN #{typeItem} AND gmt_create BETWEEN #{sysVehicleTypeQuery.startDate} AND #{sysVehicleTypeQuery.endDate} select from sys_vehicle_type is_deleted = 0 AND state != 3 AND parent_id = #{parent.id} AND name like CONCAT(\"%\",TRIM(#{sysVehicleTypeQuery.name}),\"%\") 0\"> AND type IN #{typeItem} AND gmt_create BETWEEN #{sysVehicleTypeQuery.startDate} AND #{sysVehicleTypeQuery.endDate} select from sys_vehicle_type is_deleted = 0 AND state != 3 AND id = #{sysVehicleTypeQuery.id} AND name like CONCAT(\"%\",TRIM(#{sysVehicleTypeQuery.name}),\"%\") 0\"> AND type IN #{typeItem} AND gmt_create BETWEEN #{sysVehicleTypeQuery.startDate} AND #{sysVehicleTypeQuery.endDate} order by level ,num ASC Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:15:31 "},"docs/practice/normal/mapperTest.html":{"url":"docs/practice/normal/mapperTest.html","title":"mapperTest","keywords":"","body":"mapperTest 测试目的在于检验 mybaits-plus 通用 sql 是否可用,以及自定义 sql 是否正常运行,因此只测试正常请求时表现如何,基本规则如下: mapperTest 继承统一基类 BaseTest ,可根据实际情况决定是否重写某些方法; 类名：大驼峰命名+MapperTest 规范,默认注释同数据表注释,并加上@FixMethodOrder等注解说明; 测试方法名: test+(大写字母)+(方法名)+SuccessWith+(条件); 找到 SysRoleMapperTest 角色 mapperTest 测试类,并复制重命名为 SysVehicleTypeMapperTest,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeMapperTest 文件; SysVehicleTypeMapperTest package com.snowdreams1006.securityplus.browser.module.system.mapper; import com.baomidou.mybatisplus.mapper.EntityWrapper; import com.baomidou.mybatisplus.plugins.Page; import com.google.common.base.Preconditions; import com.snowdreams1006.securityplus.browser.base.BaseTest; import com.snowdreams1006.securityplus.browser.base.enums.BaseStateEnum; import com.snowdreams1006.securityplus.browser.base.enums.RoleTypeEnum; import com.snowdreams1006.securityplus.browser.base.enums.VehicleTypeEnum; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.base.tools.ShiroTools; import com.snowdreams1006.securityplus.browser.base.tools.StringTools; import com.snowdreams1006.securityplus.browser.module.system.dto.SysUserDto; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import com.snowdreams1006.securityplus.core.tools.JacksonTools; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.time.DateUtils; import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; import javax.annotation.Resource; import java.util.Date; import java.util.List; import java.util.Objects; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.*; /** * 系统级别车辆类型表 mapperTest * * @author snowdreams1006 * @date 2018-07-10 */ @Slf4j @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class SysVehicleTypeMapperTest extends BaseTest { @Resource private SysVehicleTypeMapper sysVehicleTypeMapper; @Test public void testAInsertSuccessWithFullField() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化影响行数 int result; //默认新增完整字段 SysVehicleType sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(RoleTypeEnum.USER.getValue()) .name(\"新增成功\") .build(); sysVehicleType.setRemark(\"测试普通mapper模式下的insert:完整字段\"); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); sysVehicleType.setCreateEnterpriseId(enterpriseId); sysVehicleType.setCreateEnterpriseName(enterpriseName); sysVehicleType.setModifiedEnterpriseId(enterpriseId); sysVehicleType.setModifiedEnterpriseName(enterpriseName); sysVehicleType.setCreateUserId(userId); sysVehicleType.setCreateUserName(userName); sysVehicleType.setModifiedUserId(userId); sysVehicleType.setModifiedUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); sysVehicleType.setGmtCreate(new Date()); sysVehicleType.setGmtModified(new Date()); //新增 result = sysVehicleTypeMapper.insert(sysVehicleType); //再次查询最新属性 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(result, greaterThan(0)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(sysVehicleType.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(sysVehicleType.getNum(), equalTo(Integer.MAX_VALUE)); assertThat(sysVehicleType.getType(), equalTo(RoleTypeEnum.USER.getValue())); assertThat(sysVehicleType.getName(), equalTo(\"新增成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试普通mapper模式下的insert:完整字段\")); assertThat(sysVehicleType.getState(), equalTo(BaseStateEnum.OK.getValue())); assertThat(sysVehicleType.getDeleted(), equalTo(false)); assertThat(sysVehicleType.getVersion(), equalTo(1)); assertThat(sysVehicleType.getOwnerEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getOwnerEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getOwnerUserId(), equalTo(userId)); assertThat(sysVehicleType.getOwnerUserName(), equalTo(userName)); assertThat(sysVehicleType.getCreateEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getCreateEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getCreateUserId(), equalTo(userId)); assertThat(sysVehicleType.getCreateUserName(), equalTo(userName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); assertThat(sysVehicleType.getGmtCreate(), notNullValue()); assertThat(sysVehicleType.getGmtModified(), notNullValue()); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testAInsertSuccessWithRequiredField() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化影响行数 int result; //默认新增必须字段 SysVehicleType sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(RoleTypeEnum.USER.getValue()) .name(\"新增成功\") .build(); sysVehicleType.setRemark(\"测试普通mapper模式下的insert:必须字段\"); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); //新增 result = sysVehicleTypeMapper.insert(sysVehicleType); //再次查询最新属性 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(result, greaterThan(0)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(sysVehicleType.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(sysVehicleType.getNum(), equalTo(Integer.MAX_VALUE)); assertThat(sysVehicleType.getType(), equalTo(RoleTypeEnum.USER.getValue())); assertThat(sysVehicleType.getName(), equalTo(\"新增成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试普通mapper模式下的insert:必须字段\")); assertThat(sysVehicleType.getState(), equalTo(BaseStateEnum.OK.getValue())); assertThat(sysVehicleType.getDeleted(), equalTo(false)); assertThat(sysVehicleType.getVersion(), equalTo(1)); assertThat(sysVehicleType.getOwnerEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getOwnerEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getOwnerUserId(), equalTo(userId)); assertThat(sysVehicleType.getOwnerUserName(), equalTo(userName)); assertThat(sysVehicleType.getCreateEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getCreateEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getCreateUserId(), equalTo(userId)); assertThat(sysVehicleType.getCreateUserName(), equalTo(userName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); assertThat(sysVehicleType.getGmtCreate(), notNullValue()); assertThat(sysVehicleType.getGmtModified(), notNullValue()); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testBUpdateByIdSuccessWithSelectiveFiled() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化影响行数 int result; //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); sysVehicleType.setNum(1); sysVehicleType.setName(\"更新成功\"); sysVehicleType.setRemark(\"测试普通mapper模式下的updateById:可选字段\"); //更新 result = sysVehicleTypeMapper.updateById(sysVehicleType); //再次查询最新属性 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(result, greaterThan(0)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getNum(), equalTo(1)); assertThat(sysVehicleType.getName(), equalTo(\"更新成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试普通mapper模式下的updateById:可选字段\")); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getGmtModified(), greaterThanOrEqualTo(DateUtils.addSeconds(new Date(), -10))); log.info(\"更新成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testCDeleteByIdSuccess() { //初始化影响行数 int result; //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); //删除 result = sysVehicleTypeMapper.deleteById(sysVehicleType.getId()); //再次查询最新属性 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(result, greaterThan(0)); assertThat(sysVehicleType, nullValue()); log.info(\"删除成功\"); } @Test public void testDSelectPageSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //分页查询 List sysVehicleTypeList = sysVehicleTypeMapper.selectPage( new Page<>(1, 3), new EntityWrapper() .eq(\"type\", VehicleTypeEnum.SEMITRAILER.getValue()) ); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, hasSize(lessThanOrEqualTo(3))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"type\", equalTo(VehicleTypeEnum.SEMITRAILER.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"分页查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testESelectListSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询 List sysVehicleTypeList = sysVehicleTypeMapper.selectList(new EntityWrapper() .eq(\"type\", VehicleTypeEnum.SEMITRAILER.getValue()) ); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"type\", equalTo(VehicleTypeEnum.SEMITRAILER.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testFSelectByIdSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); //查询 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testGListDescendantSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件 SysVehicleTypeDto parent = SysVehicleTypeDto.createRoot(); SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setName(\"管理员\"); //查询当前车辆类型的后代车辆类型 List sysVehicleTypeList = sysVehicleTypeMapper.listDescendant(parent, descendantQuery); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"level\", startsWith(parent.getLevel())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"name\", containsString(descendantQuery.getName())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testHListChildrenSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件 SysVehicleTypeDto parent = SysVehicleTypeDto.createRoot(); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setName(\"管理员\"); //查询当前车辆类型的子车辆类型 List sysVehicleTypeList = sysVehicleTypeMapper.listChildren(parent, childrenQuery); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"level\", startsWith(parent.getLevel())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"parentId\", equalTo(parent.getId())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"name\", containsString(childrenQuery.getName())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testICountChildrenSuccess() { //初始化影响行数 int result; //查询条件 SysVehicleTypeDto parent = SysVehicleTypeDto.createRoot(); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setName(\"管理员\"); //查询当前车辆类型的子车辆类型统计值 result = sysVehicleTypeMapper.countChildren(parent, childrenQuery); assertThat(result, greaterThanOrEqualTo(0)); log.info(\"查询成功: {}\", JacksonTools.object2Json(result)); } @Test public void testJListPageSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件 Page page = new Page<>(1, 3); SysVehicleTypeDto parent = SysVehicleTypeDto.createRoot(); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setName(\"管理员\"); //分页查询 List sysVehicleTypeList = sysVehicleTypeMapper.listPage(page, parent, childrenQuery); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, hasSize(lessThanOrEqualTo(page.getSize()))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"level\", startsWith(parent.getLevel())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"parentId\", equalTo(parent.getId())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"name\", containsString(childrenQuery.getName())))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"分页查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testKListConditionSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件 SysVehicleTypeQuery sysVehicleTypeQuery = new SysVehicleTypeQuery(); sysVehicleTypeQuery.setName(\"管理员\"); //条件查询 List results = sysVehicleTypeMapper.listCondition(sysVehicleTypeQuery); assertThat(results, notNullValue()); assertThat(results, hasSize(greaterThanOrEqualTo(0))); assertThat(results, everyItem(hasProperty(\"name\", containsString(sysVehicleTypeQuery.getName())))); assertThat(results, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(results, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(results, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(results, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"条件查询成功: {}\", JacksonTools.object2Json(results)); } /** * 准备测试数据 * * @param sysVehicleType 自定义的新增车辆类型对象,若 null, 则新增随机车辆类型对象,否则新增指定车辆类型对象 * @return 新增成功的车辆类型对象 */ private SysVehicleType prepareTestData(SysVehicleType sysVehicleType) { //初始化影响行数 int result; //初始化系统车辆类型实体对象 sysVehicleType if (Objects.isNull(sysVehicleType)) { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"准备测试登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认测试数据 sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(RoleTypeEnum.USER.getValue()) .name(\"测试数据:\" + StringTools.getRandomString(6)) .build(); sysVehicleType.setRemark(\"测试普通mapper模式下的insert:\" + StringTools.getRandomString(6)); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); sysVehicleType.setCreateEnterpriseId(enterpriseId); sysVehicleType.setCreateEnterpriseName(enterpriseName); sysVehicleType.setModifiedEnterpriseId(enterpriseId); sysVehicleType.setModifiedEnterpriseName(enterpriseName); sysVehicleType.setCreateUserId(userId); sysVehicleType.setCreateUserName(userName); sysVehicleType.setModifiedUserId(userId); sysVehicleType.setModifiedUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); sysVehicleType.setGmtCreate(new Date()); sysVehicleType.setGmtModified(new Date()); } //新增 result = sysVehicleTypeMapper.insert(sysVehicleType); //再次查询最新属性 sysVehicleType = sysVehicleTypeMapper.selectById(sysVehicleType.getId()); assertThat(result, greaterThan(0)); assertThat(sysVehicleType, notNullValue()); log.info(\"测试数据: {}\", JacksonTools.object2Json(sysVehicleType)); return sysVehicleType; } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 08:59:44 "},"docs/practice/normal/entityTest.html":{"url":"docs/practice/normal/entityTest.html","title":"entityTest","keywords":"","body":"entityTest 测试目的在于检验 mybaits-plus 的 ar 模式是否可用,本质上是mapper的语法糖,因此只测试正常请求时表现如何,基本规则如下: entityTest 继承统一基类 BaseTest ,可根据实际情况决定是否重写某些方法; 类名：大驼峰命名+Test 规范,默认注释同数据表注释,并加上@FixMethodOrder等注解说明; 测试方法名: test+(大写字母)+(方法名)+SuccessWith+(条件); 找到 SysRoleTest 角色 entityTest 测试类,并复制重命名为 SysVehicleTypeTest,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeTest 文件; SysVehicleTypeTest package com.snowdreams1006.securityplus.browser.module.system.entity; import com.baomidou.mybatisplus.mapper.EntityWrapper; import com.baomidou.mybatisplus.plugins.Page; import com.google.common.base.Preconditions; import com.snowdreams1006.securityplus.browser.base.BaseTest; import com.snowdreams1006.securityplus.browser.base.enums.*; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.base.tools.ShiroTools; import com.snowdreams1006.securityplus.browser.base.tools.StringTools; import com.snowdreams1006.securityplus.browser.module.system.dto.SysUserDto; import com.snowdreams1006.securityplus.core.tools.JacksonTools; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.time.DateUtils; import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; import java.util.Date; import java.util.List; import java.util.Objects; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.*; /** * 系统级别车辆类型表 entityTest * * @author snowdreams1006 * @date 2018-08-07 */ @Slf4j @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class SysVehicleTypeTest extends BaseTest { @Test public void testAInsertSuccessWithFullField() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化操作成功标识 boolean result; //默认新增完整字段 SysVehicleType sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleType.setRemark(\"测试ActiveRecord模式下的insert:完整字段\"); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); sysVehicleType.setCreateEnterpriseId(enterpriseId); sysVehicleType.setCreateEnterpriseName(enterpriseName); sysVehicleType.setModifiedEnterpriseId(enterpriseId); sysVehicleType.setModifiedEnterpriseName(enterpriseName); sysVehicleType.setCreateUserId(userId); sysVehicleType.setCreateUserName(userName); sysVehicleType.setModifiedUserId(userId); sysVehicleType.setModifiedUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); sysVehicleType.setGmtCreate(new Date()); sysVehicleType.setGmtModified(new Date()); //新增 result = sysVehicleType.insert(); //再次查询最新属性 sysVehicleType = sysVehicleType.selectById(); assertThat(result, equalTo(true)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(sysVehicleType.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(sysVehicleType.getNum(), equalTo(Integer.MAX_VALUE)); assertThat(sysVehicleType.getType(), equalTo(VehicleTypeEnum.SEMITRAILER.getValue())); assertThat(sysVehicleType.getName(), equalTo(\"新增成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试ActiveRecord模式下的insert:完整字段\")); assertThat(sysVehicleType.getState(), equalTo(BaseStateEnum.OK.getValue())); assertThat(sysVehicleType.getDeleted(), equalTo(false)); assertThat(sysVehicleType.getVersion(), equalTo(1)); assertThat(sysVehicleType.getOwnerEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getOwnerEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getOwnerUserId(), equalTo(userId)); assertThat(sysVehicleType.getOwnerUserName(), equalTo(userName)); assertThat(sysVehicleType.getCreateEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getCreateEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getCreateUserId(), equalTo(userId)); assertThat(sysVehicleType.getCreateUserName(), equalTo(userName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); assertThat(sysVehicleType.getGmtCreate(), notNullValue()); assertThat(sysVehicleType.getGmtModified(), notNullValue()); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testAInsertSuccessWithRequiredField() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化操作成功标识 boolean result; //默认新增必须字段 SysVehicleType sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleType.setRemark(\"测试ActiveRecord模式下的insert:必须字段\"); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); //新增 result = sysVehicleType.insert(); //再次查询最新属性 sysVehicleType = sysVehicleType.selectById(); assertThat(result, equalTo(true)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(sysVehicleType.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(sysVehicleType.getNum(), equalTo(Integer.MAX_VALUE)); assertThat(sysVehicleType.getType(), equalTo(VehicleTypeEnum.SEMITRAILER.getValue())); assertThat(sysVehicleType.getName(), equalTo(\"新增成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试ActiveRecord模式下的insert:必须字段\")); assertThat(sysVehicleType.getState(), equalTo(BaseStateEnum.OK.getValue())); assertThat(sysVehicleType.getDeleted(), equalTo(false)); assertThat(sysVehicleType.getVersion(), equalTo(1)); assertThat(sysVehicleType.getOwnerEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getOwnerEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getOwnerUserId(), equalTo(userId)); assertThat(sysVehicleType.getOwnerUserName(), equalTo(userName)); assertThat(sysVehicleType.getCreateEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getCreateEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getCreateUserId(), equalTo(userId)); assertThat(sysVehicleType.getCreateUserName(), equalTo(userName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); assertThat(sysVehicleType.getGmtCreate(), notNullValue()); assertThat(sysVehicleType.getGmtModified(), notNullValue()); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testBUpdateByIdSuccessWithSelectiveFiled() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //初始化操作成功标识 boolean result; //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); sysVehicleType.setNum(1); sysVehicleType.setName(\"更新成功\"); sysVehicleType.setRemark(\"测试ActiveRecord模式下的updateById:可选字段\"); //更新 result = sysVehicleType.updateById(); //再次查询最新属性 sysVehicleType = sysVehicleType.selectById(); assertThat(result, equalTo(true)); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); assertThat(sysVehicleType.getNum(), equalTo(1)); assertThat(sysVehicleType.getName(), equalTo(\"更新成功\")); assertThat(sysVehicleType.getRemark(), equalTo(\"测试ActiveRecord模式下的updateById:可选字段\")); assertThat(sysVehicleType.getModifiedEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleType.getModifiedEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleType.getModifiedUserId(), equalTo(userId)); assertThat(sysVehicleType.getModifiedUserName(), equalTo(userName)); assertThat(sysVehicleType.getGmtModified(), greaterThanOrEqualTo(DateUtils.addSeconds(new Date(), -10))); log.info(\"更新成功: {}\", JacksonTools.object2Json(sysVehicleType)); } @Test public void testCDeleteByIdSuccess() { //初始化操作成功标识 boolean result; //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); //删除 result = sysVehicleType.deleteById(); //再次查询最新属性 sysVehicleType = sysVehicleType.selectById(); assertThat(result, equalTo(true)); assertThat(sysVehicleType, nullValue()); log.info(\"删除成功\"); } @Test public void testDSelectPageSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //分页查询 SysVehicleType sysVehicleType = new SysVehicleType(); Page sysVehicleTypePage = sysVehicleType.selectPage( new Page<>(1, 3), new EntityWrapper() .eq(\"type\", VehicleTypeEnum.SEMITRAILER.getValue()) ); assertThat(sysVehicleTypePage, notNullValue()); assertThat(sysVehicleTypePage.getCurrent(), equalTo(1)); assertThat(sysVehicleTypePage.getSize(), equalTo(3)); assertThat(sysVehicleTypePage.getPages(), greaterThanOrEqualTo(0L)); assertThat(sysVehicleTypePage.getTotal(), greaterThanOrEqualTo(0L)); assertThat(sysVehicleTypePage.getRecords(), hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypePage.getRecords(), everyItem(hasProperty(\"type\", equalTo(VehicleTypeEnum.SEMITRAILER.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypePage.getRecords(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypePage.getRecords(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypePage.getRecords(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"分页查询成功: {}\", JacksonTools.object2Json(sysVehicleTypePage)); } @Test public void testESelectListSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询 SysVehicleType sysVehicleType = new SysVehicleType(); List sysVehicleTypeList = sysVehicleType.selectList(new EntityWrapper() .eq(\"type\", VehicleTypeEnum.SEMITRAILER.getValue()) ); assertThat(sysVehicleTypeList, notNullValue()); assertThat(sysVehicleTypeList, hasSize(greaterThanOrEqualTo(0))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"type\", equalTo(VehicleTypeEnum.SEMITRAILER.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(sysVehicleTypeList, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeList)); } @Test public void testFSelectByIdSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //测试数据 SysVehicleType sysVehicleType = prepareTestData(null); //查询 sysVehicleType = sysVehicleType.selectById(); assertThat(sysVehicleType, notNullValue()); assertThat(sysVehicleType.getId(), notNullValue()); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleType.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleType.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleType.getTenantName(), equalTo(tenantName)); } log.info(\"查询成功: {}\", JacksonTools.object2Json(sysVehicleType)); } /** * 准备测试数据 * * @param sysVehicleType 自定义的新增车辆类型对象,若 null, 则新增随机车辆类型对象,否则新增指定车辆类型对象 * @return 新增成功的车辆类型对象 */ private SysVehicleType prepareTestData(SysVehicleType sysVehicleType) { //初始化操作成功标识 boolean result; //初始化系统车辆类型实体对象 sysVehicleType if (Objects.isNull(sysVehicleType)) { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"准备测试登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认测试数据 sysVehicleType = SysVehicleType.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .level(LevelTools.ROOT_LEVEL) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"测试数据:\" + StringTools.getRandomString(6)) .build(); sysVehicleType.setRemark(\"测试ActiveRecord模式下的Insert:\" + StringTools.getRandomString(6)); sysVehicleType.setState(BaseStateEnum.OK.getValue()); sysVehicleType.setDeleted(false); sysVehicleType.setVersion(1); sysVehicleType.setOwnerEnterpriseId(enterpriseId); sysVehicleType.setOwnerEnterpriseName(enterpriseName); sysVehicleType.setOwnerUserId(userId); sysVehicleType.setOwnerUserName(userName); sysVehicleType.setCreateEnterpriseId(enterpriseId); sysVehicleType.setCreateEnterpriseName(enterpriseName); sysVehicleType.setModifiedEnterpriseId(enterpriseId); sysVehicleType.setModifiedEnterpriseName(enterpriseName); sysVehicleType.setCreateUserId(userId); sysVehicleType.setCreateUserName(userName); sysVehicleType.setModifiedUserId(userId); sysVehicleType.setModifiedUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleType.setTenantId(tenantId); } sysVehicleType.setTenantType(tenantType); sysVehicleType.setTenantName(tenantName); sysVehicleType.setGmtCreate(new Date()); sysVehicleType.setGmtModified(new Date()); } //新增 result = sysVehicleType.insert(); //再次查询最新属性 sysVehicleType = sysVehicleType.selectById(); assertThat(result, equalTo(true)); assertThat(sysVehicleType, notNullValue()); log.info(\"测试数据: {}\", JacksonTools.object2Json(sysVehicleType)); return sysVehicleType; } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 09:00:23 "},"docs/practice/normal/service.html":{"url":"docs/practice/normal/service.html","title":"service","keywords":"","body":"service 基本规则如下: service 继承统一基类 IService ,可根据实际情况决定是否重写某些方法; 类名：I+(大驼峰命名)+Service 规范,默认注释同数据表注释; 方法名: 查询多个结果以 list 开头,获取单个对象以 get开头,获取统计值以 count开头等; 找到 ISysRoleService 角色 service 接口类,并复制重命名为 ISysVehicleTypeService,同时打开两个窗口,方便编辑; 根据实际情况,编写 ISysVehicleTypeService 文件; ISysVehicleTypeService package com.snowdreams1006.securityplus.browser.module.system.service; import com.baomidou.mybatisplus.plugins.Page; import com.baomidou.mybatisplus.service.IService; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import org.springframework.transaction.annotation.Transactional; import java.util.List; /** * 系统系别车辆类型表 service * * @author snowdreams1006 * @date 2018-05-17 */ public interface ISysVehicleTypeService extends IService { /** * 同步查询车辆类型树 * * @param sysVehicleTypeQuery 查询条件 * @return 车辆类型树 */ SysVehicleTypeDto getSyncTree(SysVehicleTypeQuery sysVehicleTypeQuery); /** * 异步查询车辆类型树 * * @param sysVehicleTypeQuery 查询条件 * @return 车辆类型列表 */ List listAsyncTree(SysVehicleTypeQuery sysVehicleTypeQuery); /** * 分页查询车辆类型 * * @param page 分页条件 * @param sysVehicleTypeQuery 查询条件 * @return 分页对象 */ Page listPage(Page page, SysVehicleTypeQuery sysVehicleTypeQuery); /** * 条件查询车辆类型 * * @param sysVehicleTypeQuery 查询条件 * @return 车辆类型列表 */ List listCondition(SysVehicleTypeQuery sysVehicleTypeQuery); /** * 精确查询某个车辆类型 * * @param id 车辆类型id * @return 车辆类型对象 */ SysVehicleTypeDto getOne(Long id); /** * 新增某个车辆类型 * * @param sysVehicleTypeParam 新增参数 * @return 新增车辆类型对象 */ @Transactional(rollbackFor = Exception.class) SysVehicleTypeDto addOne(SysVehicleTypeParam sysVehicleTypeParam); /** * 更新某个车辆类型 * * @param sysVehicleTypeParam 更新参数 * @return 更新车辆类型对象 */ @Transactional(rollbackFor = Exception.class) SysVehicleTypeDto updateOne(SysVehicleTypeParam sysVehicleTypeParam); /** * 删除某个车辆类型 * * @param id 车辆类型id */ @Transactional(rollbackFor = Exception.class) void deleteOne(Long id); } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 01:19:34 "},"docs/practice/normal/serviceImpl.html":{"url":"docs/practice/normal/serviceImpl.html","title":"serviceImpl","keywords":"","body":"serviceImpl 基本规则如下: serviceImpl 继承统一基类 ServiceImpl ,可根据实际情况决定是否重写某些方法; 类名：I+(大驼峰命名)+Service 规范,默认注释同数据表注释,并加上@Service等注解说明; 方法名: 接口的实现类对外暴露的方法 public,否则 private,尽量不要 protected; 找到 SysRoleServiceImpl 角色 serviceImpl 实现类,并复制重命名为 SysVehicleTypeServiceImpl,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeServiceImpl 文件; SysVehicleTypeServiceImpl package com.snowdreams1006.securityplus.browser.module.system.service.impl; import com.baomidou.mybatisplus.mapper.EntityWrapper; import com.baomidou.mybatisplus.mapper.Wrapper; import com.baomidou.mybatisplus.plugins.Page; import com.baomidou.mybatisplus.service.impl.ServiceImpl; import com.google.common.base.Preconditions; import com.google.common.collect.ArrayListMultimap; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.base.tools.PageTools; import com.snowdreams1006.securityplus.browser.base.tools.ShiroTools; import com.snowdreams1006.securityplus.browser.module.system.dto.SysUserDto; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.mapper.SysVehicleTypeMapper; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import com.snowdreams1006.securityplus.browser.module.system.service.ISysVehicleTypeService; import com.snowdreams1006.securityplus.core.tools.ValidatorTools; import org.apache.commons.collections.CollectionUtils; import org.apache.commons.lang3.BooleanUtils; import org.apache.commons.lang3.time.DateUtils; import org.springframework.stereotype.Service; import javax.annotation.Resource; import java.util.*; import java.util.stream.Collectors; /** * 系统系别车辆类型表 serviceImpl * * @author snowdreams1006 * @date 2018-05-17 */ @Service public class SysVehicleTypeServiceImpl extends ServiceImpl implements ISysVehicleTypeService { @Resource private SysVehicleTypeMapper sysVehicleTypeMapper; @Override public SysVehicleTypeDto getSyncTree(SysVehicleTypeQuery sysVehicleTypeQuery) { //处理公共查询条件 this.handleCommonQuery(sysVehicleTypeQuery); //根据查询条件获取上级车辆类型 SysVehicleTypeDto parent = this.getParentByQuery(sysVehicleTypeQuery); if (Objects.isNull(parent)) { return null; } //上级车辆类型的子车辆类型 List children = Lists.newArrayList(); //查询上级车辆类型的子孙车辆类型(平行列表) List sysVehicleTypeList = sysVehicleTypeMapper.listDescendant(parent, sysVehicleTypeQuery); if (CollectionUtils.isNotEmpty(sysVehicleTypeList)) { //entity列表 适配成 dto列表 List descendant = this.entityListAdaptDtoList(sysVehicleTypeList, sysVehicleTypeQuery); //平行列表 适配成 递归列表 children = this.parallelList2recursiveList(parent, descendant); } //建立父子节点关联 parent.setChildren(children); return parent; } @Override public List listAsyncTree(SysVehicleTypeQuery sysVehicleTypeQuery) { //处理公共查询条件 this.handleCommonQuery(sysVehicleTypeQuery); //根据查询条件获取上级车辆类型 SysVehicleTypeDto parent = this.getParentByQuery(sysVehicleTypeQuery); if (Objects.isNull(parent)) { return null; } //上级车辆类型的子车辆类型 List children = Lists.newArrayList(); //查询上级车辆类型的子车辆类型 List sysVehicleTypeList = sysVehicleTypeMapper.listChildren(parent, sysVehicleTypeQuery); if (CollectionUtils.isNotEmpty(sysVehicleTypeList)) { //entity列表 适配成 dto列表 children = this.entityListAdaptDtoList(sysVehicleTypeList, sysVehicleTypeQuery); } return children; } @Override public Page listPage(Page page, SysVehicleTypeQuery sysVehicleTypeQuery) { //默认分页 if (Objects.isNull(page)) { page = new PageTools().defaultPage(); } //处理公共查询条件 this.handleCommonQuery(sysVehicleTypeQuery); //根据查询条件获取上级车辆类型 SysVehicleTypeDto parent = this.getParentByQuery(sysVehicleTypeQuery); if (Objects.isNull(parent)) { return null; } //上级车辆类型的子车辆类型 List records = Lists.newArrayList(); //分页查询车辆类型 List sysVehicleTypeList = sysVehicleTypeMapper.listPage(page, parent, sysVehicleTypeQuery); if (CollectionUtils.isNotEmpty(sysVehicleTypeList)) { //entity列表 适配成 dto列表 records = this.entityListAdaptDtoList(sysVehicleTypeList, sysVehicleTypeQuery); } //构造分页信息 page.setRecords(records); return page; } @Override public List listCondition(SysVehicleTypeQuery sysVehicleTypeQuery) { //处理公共查询条件 this.handleCommonQuery(sysVehicleTypeQuery); //查询结果列表 List results = Lists.newArrayList(); //条件查询车辆类型 List sysVehicleTypeList = sysVehicleTypeMapper.listCondition(sysVehicleTypeQuery); if (CollectionUtils.isNotEmpty(sysVehicleTypeList)) { //entity列表 适配成 dto列表 results = this.entityListAdaptDtoList(sysVehicleTypeList, sysVehicleTypeQuery); } return results; } @Override public SysVehicleTypeDto getOne(Long id) { //基本数据验证 Preconditions.checkNotNull(id, \"待查询的车辆类型id[null]不存在\"); //精确查询 SysVehicleType sysVehicleType = sysVehicleTypeMapper.selectById(id); //数据不存在,返回 null, 具体逻辑由调用者处理 if (Objects.isNull(sysVehicleType)) { return null; } return this.entityAdaptDto(sysVehicleType); } @Override public SysVehicleTypeDto addOne(SysVehicleTypeParam sysVehicleTypeParam) { //基本数据验证 ValidatorTools.check(sysVehicleTypeParam); //调整参数 adjustParam(sysVehicleTypeParam); //唯一性校验 if (checkExist(sysVehicleTypeParam.getParentId(), sysVehicleTypeParam.getId(), sysVehicleTypeParam.getName())) { throw new IllegalArgumentException(String.format(\"同一层级下的车辆类型[%s]已存在\", sysVehicleTypeParam.getName())); } //param 适配成 entity SysVehicleType sysVehicleType = Preconditions.checkNotNull(SysVehicleTypeDto.paramAdaptEntity(sysVehicleTypeParam)); sysVehicleType.setLevel(LevelTools.calculateLevel(this.getLevel(sysVehicleType.getParentId()), sysVehicleType.getParentId())); //新增 sysVehicleTypeMapper.insert(sysVehicleType); return this.getOne(sysVehicleType.getId()); } @Override public SysVehicleTypeDto updateOne(SysVehicleTypeParam sysVehicleTypeParam) { //基本数据验证 ValidatorTools.check(sysVehicleTypeParam); Preconditions.checkNotNull(sysVehicleTypeParam.getId(), String.format(\"待更新的车辆类型id[%s]不存在\", sysVehicleTypeParam.getName())); //业务逻辑验证 SysVehicleTypeDto beforeDto = Preconditions.checkNotNull(this.getOne(sysVehicleTypeParam.getId())); Preconditions.checkNotNull(beforeDto, String.format(\"待更新的车辆类型[%s]不存在\", beforeDto.getName())); //dto 适配成 entity SysVehicleType before = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptEntity(beforeDto)); //调整更新参数 adjustParam(sysVehicleTypeParam); //唯一性校验 if (checkExist(sysVehicleTypeParam.getParentId(), sysVehicleTypeParam.getId(), sysVehicleTypeParam.getName())) { throw new IllegalArgumentException(String.format(\"同一层级下的车辆类型[%s]已存在\", sysVehicleTypeParam.getName())); } //param 适配成 entity SysVehicleType after = Preconditions.checkNotNull(SysVehicleTypeDto.paramAdaptEntity(sysVehicleTypeParam)); after.setLevel(LevelTools.calculateLevel(this.getLevel(after.getParentId()), after.getParentId())); //同步自动新增字段 syncInsertFillFiled(before, after); //更新子孙车辆类型 this.updateDescendant(before, after); return this.getOne(after.getId()); } @Override public void deleteOne(Long id) { //基本数据验证 Preconditions.checkNotNull(id, \"待删除的车辆类型id[null]不存在\"); //业务逻辑验证 SysVehicleTypeDto sysVehicleTypeDto = this.getOne(id); Preconditions.checkNotNull(sysVehicleTypeDto, String.format(\"待删除的车辆类型id[%s]不存在\", id)); //当前车辆类型存在子车辆类型 if (sysVehicleTypeMapper.countChildren(sysVehicleTypeDto, null) > 0) { throw new IllegalArgumentException(String.format(\"待删除的车辆类型[%s]存在子车辆类型\", sysVehicleTypeDto.getName())); } sysVehicleTypeMapper.deleteById(id); } /** * 处理公共查询条件 * * @param sysVehicleTypeQuery 车辆类型查询条件 */ private void handleCommonQuery(SysVehicleTypeQuery sysVehicleTypeQuery) { //修正查询日期: yyyy-MM-dd 解析成 Date 类型是当日零点,因此结束日期手动推迟一天 if (Objects.nonNull(sysVehicleTypeQuery)) { Date startDate = sysVehicleTypeQuery.getStartDate(); Date endDate = sysVehicleTypeQuery.getEndDate(); //不存在开始日期,则日期查询无效,若不存在结束日期,则默认当前日期 if (Objects.nonNull(startDate)) { if (Objects.nonNull(endDate)) { endDate = DateUtils.addDays(endDate, 1); } else { endDate = new Date(); } sysVehicleTypeQuery.setEndDate(endDate); } } } /** * 根据车辆类型查询条件获取上级车辆类型 * * @param sysVehicleTypeQuery 车辆类型查询条件 * @return 上级车辆类型 */ private SysVehicleTypeDto getParentByQuery(SysVehicleTypeQuery sysVehicleTypeQuery) { //默认上级车辆类型是根节点,level = \"0\" SysVehicleTypeDto parent = SysVehicleTypeDto.createRoot(); //上级车辆类型是否是普通节点 if (Objects.nonNull(sysVehicleTypeQuery)) { Long id = sysVehicleTypeQuery.getId(); boolean normalParentFlag = Objects.nonNull(id) && !Objects.equals(Long.valueOf(LevelTools.ROOT_LEVEL), id); if (normalParentFlag) { parent = this.getOne(id); } } return parent; } /** * 车辆类型entity适配成车辆类型dto * * @param sysVehicleType 车辆类型entity * @return 车辆类型dto */ private SysVehicleTypeDto entityAdaptDto(SysVehicleType sysVehicleType) { //参数 null, 则返回 null, 具体逻辑由调用者处理 if (Objects.isNull(sysVehicleType)) { return null; } //entity静态数据浅拷贝 SysVehicleTypeDto sysVehicleTypeDto = Preconditions.checkNotNull(SysVehicleTypeDto.entityAdaptDto(sysVehicleType)); //dto动态数据在线生成 sysVehicleTypeDto.setIsRoot(false); Boolean isParent = sysVehicleTypeMapper.countChildren(sysVehicleTypeDto, null) > 0; sysVehicleTypeDto.setIsParent(isParent); return sysVehicleTypeDto; } /** * 车辆类型entity列表适配成车辆类型dto列表 * * @param sysVehicleTypeList 车辆类型entity列表 * @return 车辆类型dto列表 */ private List entityListAdaptDtoList(List sysVehicleTypeList, SysVehicleTypeQuery sysVehicleTypeQuery) { //最终输出dto结果列表 List sysVehicleTypeDtoList = Lists.newArrayList(); //集合为空,则返回空集合 if (CollectionUtils.isEmpty(sysVehicleTypeList)) { return sysVehicleTypeDtoList; } //将系统权车辆类型适配成车辆类型dto for (SysVehicleType sysVehicleType : sysVehicleTypeList) { //entity静态数据浅拷贝 SysVehicleTypeDto sysVehicleTypeDto = Preconditions.checkNotNull(SysVehicleTypeDto.entityAdaptDto(sysVehicleType)); //dto动态数据在线生成 sysVehicleTypeDto.setIsRoot(false); //查询子车辆类型统计值 Integer allChildCount = sysVehicleTypeMapper.countChildren(sysVehicleTypeDto, sysVehicleTypeQuery); sysVehicleTypeDto.setIsParent(allChildCount > 0); //entity 转成 dto sysVehicleTypeDtoList.add(sysVehicleTypeDto); } return sysVehicleTypeDtoList; } /** * 根据上级车辆类型及其子孙车辆类型渲染成车辆类型树列表 * * @param parent 上级车辆类型 * @param sysVehicleTypeDtoList 上级车辆类型的子孙车辆类型(平行结构) * @return 车辆类型树列表(递归结构) */ private List parallelList2recursiveList(SysVehicleTypeDto parent, List sysVehicleTypeDtoList) { //父节点的直接子节点dto列表 List children = Lists.newArrayList(); //逐级遍历,不支持跨级递归 if (CollectionUtils.isEmpty(sysVehicleTypeDtoList)) { return children; } //全部子节点车辆类型dto对象map Multimap allDtoMap = ArrayListMultimap.create(); //父节点是根节点还是普通节点 String parentLevel = parent.getLevel(); if (!parent.getIsRoot()) { parentLevel = LevelTools.calculateLevel(parentLevel, parent.getId()); } //将子孙节点组装到指定集合 for (SysVehicleTypeDto sysVehicleTypeDto : sysVehicleTypeDtoList) { //按照 level 层级区分子孙节点 allDtoMap.put(sysVehicleTypeDto.getLevel(), sysVehicleTypeDto); //组装父节点的一级子节点 if (Objects.equals(parentLevel, sysVehicleTypeDto.getLevel())) { children.add(sysVehicleTypeDto); } } //对一级子节点dto列表进行排序 children.sort(sysVehicleTypeDtoComparator); //转变成树形结构 this.recursive2Tree(children, parentLevel, allDtoMap); return children; } /** * 调整参数 * * @param sysVehicleTypeParam 原始参数 */ private void adjustParam(SysVehicleTypeParam sysVehicleTypeParam) { //新增时,无所有者以及租户信息,则自动设置为当前用户参数(注:注意租户 tenantId 属性) boolean autoInsertFlag = Objects.isNull(sysVehicleTypeParam.getId()); if (autoInsertFlag) { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); //所有者信息:可能无\"管理员\"车辆类型(无权设置),也可能有\"管理员\"车辆类型(忽略设置) if (Objects.isNull(sysVehicleTypeParam.getOwnerEnterpriseId())) { sysVehicleTypeParam.setOwnerEnterpriseId(enterpriseId); } if (Objects.isNull(sysVehicleTypeParam.getOwnerEnterpriseName())) { sysVehicleTypeParam.setOwnerEnterpriseName(enterpriseName); } if (Objects.isNull(sysVehicleTypeParam.getOwnerUserId())) { sysVehicleTypeParam.setOwnerUserId(userId); } if (Objects.isNull(sysVehicleTypeParam.getOwnerUserName())) { sysVehicleTypeParam.setOwnerUserName(userName); } //租户 tenantId:无\"管理员\"车辆类型(无权设置,不能设置),有\"管理员\"车辆类型(忽略设置) if (ShiroTools.isAdmin() && Objects.isNull(sysVehicleTypeParam.getTenantId())) { sysVehicleTypeParam.setTenantId(tenantId); } //租户信息:可能无\"管理员\"车辆类型(无权设置),也可能有\"管理员\"车辆类型(忽略设置) if (Objects.isNull(sysVehicleTypeParam.getTenantType())) { sysVehicleTypeParam.setTenantType(tenantType); } if (Objects.isNull(sysVehicleTypeParam.getTenantName())) { sysVehicleTypeParam.setTenantName(tenantName); } } } /** * 检查车辆类型是否已存在 * * @param parentId 上级车辆类型 id * @param id 车辆类型 id, 新增时为空, 修改时非空 * @param name 车辆类型名称 * @return 车辆类型是否存在 */ private boolean checkExist(Long parentId, Long id, String name) { //新增/更新判断是否已存在 Wrapper sysVehicleTypeWrapper = new EntityWrapper<>(); sysVehicleTypeWrapper.eq(\"parent_id\", parentId) .eq(\"name\", name); if (Objects.nonNull(id)) { sysVehicleTypeWrapper.ne(\"id\", id); } return sysVehicleTypeMapper.selectCount(sysVehicleTypeWrapper) > 0; } /** * 查询车辆类型 level 值 * * @param id 车辆类型 id, * @return 车辆类型level, 存在返回 level,不存在时返回\"\" */ private String getLevel(Long id) { SysVehicleType sysVehicleType = sysVehicleTypeMapper.selectById(id); if (sysVehicleType == null) { return \"\"; } return sysVehicleType.getLevel(); } /** * 同步新增填充字段 * * @param before 同步数据源 * @param after 待同步数据 */ private void syncInsertFillFiled(SysVehicleType before, SysVehicleType after) { //获取新增自动填充字段 Long createEnterpriseId = before.getCreateEnterpriseId(); String createEnterpriseName = before.getCreateEnterpriseName(); Long createUserId = before.getCreateUserId(); String createUserName = before.getCreateUserName(); Date gmtCreate = before.getGmtCreate(); //同步更新新增自动填充字段 after.setCreateEnterpriseId(createEnterpriseId); after.setCreateEnterpriseName(createEnterpriseName); after.setCreateUserId(createUserId); after.setCreateUserName(createUserName); after.setGmtCreate(gmtCreate); } /** * 更新子孙车辆类型 * * @param before 更新前车辆类型对象 * @param after 更新后车辆类型对象 */ private void updateDescendant(SysVehicleType before, SysVehicleType after) { //更新前后车辆类型level String beforeLevel = before.getLevel(); String afterLevel = after.getLevel(); //更改父节点,则同步更新子孙节点 level 冗余字段 if (!Objects.equals(beforeLevel, afterLevel)) { //处理当前车辆类型的后代 SysVehicleTypeDto sysVehicleTypeDto = SysVehicleTypeDto.entityAdaptDto(before); List sysVehicleTypeList = sysVehicleTypeMapper.listDescendant(sysVehicleTypeDto, null); //更新子代的 level 冗余字段 if (CollectionUtils.isNotEmpty(sysVehicleTypeList)) { for (SysVehicleType sysVehicleType : sysVehicleTypeList) { String level = sysVehicleType.getLevel(); //更新子孙车辆类型level if (level.startsWith(beforeLevel)) { //更新根节点的前缀 level = afterLevel + level.substring(beforeLevel.length()); sysVehicleType.setLevel(level); } //更新子孙车辆类型 sysVehicleTypeMapper.updateById(sysVehicleType); } } } //更新车辆类型 sysVehicleTypeMapper.updateById(after); } /** * 根据选中车辆类型列表来处理完整车辆类型列表 * * @param allSysVehicleTypeDtoList 完整车辆类型列表 * @param selectedSysVehicleTypeDtoList 选中车辆类型列表 * @return 带有选中状态的完整车辆类型列表 */ private List handleSelectRoleList(List allSysVehicleTypeDtoList, List selectedSysVehicleTypeDtoList) { //完整车辆类型列表非空校验 if (CollectionUtils.isEmpty(allSysVehicleTypeDtoList)) { return Lists.newArrayList(); } //完整车辆类型列表 list 转 set Set allSysVehicleTypeDtoIdSet = allSysVehicleTypeDtoList.stream().map(SysVehicleTypeDto::getId).collect(Collectors.toSet()); //选中车辆类型列表 list 转 set Set selectedSysVehicleTypeDtoIdSet = selectedSysVehicleTypeDtoList.stream().map(SysVehicleTypeDto::getId).collect(Collectors.toSet()); //完整权限与选中权限交集 Sets.SetView selected = Sets.intersection(allSysVehicleTypeDtoIdSet, selectedSysVehicleTypeDtoIdSet); //处理完整权限列表 for (SysVehicleTypeDto sysVehicleTypeDto : allSysVehicleTypeDtoList) { //选中权限节点 if (selected.contains(sysVehicleTypeDto.getId())) { sysVehicleTypeDto.setChecked(true); } else { sysVehicleTypeDto.setChecked(false); } //父节点则展开 if (BooleanUtils.toBooleanDefaultIfNull(sysVehicleTypeDto.getIsParent(), false)) { sysVehicleTypeDto.setOpen(true); } else { sysVehicleTypeDto.setOpen(false); } } return allSysVehicleTypeDtoList; } /** * 以currentList为基础,递归渲染车辆类型树 * * @param currentList 正在遍历的List * @param currentLevel 正在遍历的level * @param allDtoMap 全部节点map */ private void recursive2Tree(List currentList, String currentLevel, Multimap allDtoMap) { //遍历当前节点并和子孙节点建立关系 for (SysVehicleTypeDto sysVehicleTypeDto : currentList) { //下次遍历的层级level String childrenLevel = LevelTools.calculateLevel(currentLevel, sysVehicleTypeDto.getId()); //下次遍历的dtoList List children = (List) allDtoMap.get(childrenLevel); //不支持跨级递归 if (CollectionUtils.isNotEmpty(children)) { //对下次遍历的list排序 children.sort(sysVehicleTypeDtoComparator); //将下次遍历的list作为当前节点的children sysVehicleTypeDto.setChildren(children); //继续迭代 recursive2Tree(children, childrenLevel, allDtoMap); } } } /** * 车辆类型dto 比较器 */ private Comparator sysVehicleTypeDtoComparator = Comparator.comparingInt(SysVehicleType::getNum); } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 08:47:16 "},"docs/practice/normal/serviceImplTest.html":{"url":"docs/practice/normal/serviceImplTest.html","title":"serviceImplTest","keywords":"","body":"serviceImplTest 基本规则如下: serviceImplTest 继承统一基类 BaseTest ,可根据实际情况决定是否重写某些方法; 类名：大驼峰命名+ServiceImplTest 规范,默认注释同数据表注释,并加上@FixMethodOrder等注解说明; 测试方法名: test+(大写字母)+(方法名)+SuccessWith+(条件) 或者 test+(大写字母)+(方法名)+FailureBecauseof+(原因); 找到 SysRoleServiceImplTest 角色 serviceImplTest 测试类,并复制重命名为 SysVehicleTypeServiceImplTest,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeServiceImplTest 文件; SysVehicleTypeServiceImplTest package com.snowdreams1006.securityplus.browser.module.system.service.impl; import com.baomidou.mybatisplus.plugins.Page; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.snowdreams1006.securityplus.browser.base.BaseTest; import com.snowdreams1006.securityplus.browser.base.enums.BaseStateEnum; import com.snowdreams1006.securityplus.browser.base.enums.RoleSourceEnum; import com.snowdreams1006.securityplus.browser.base.enums.RoleTypeEnum; import com.snowdreams1006.securityplus.browser.base.enums.VehicleTypeEnum; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.base.tools.PageTools; import com.snowdreams1006.securityplus.browser.base.tools.ShiroTools; import com.snowdreams1006.securityplus.browser.base.tools.StringTools; import com.snowdreams1006.securityplus.browser.module.system.dto.SysUserDto; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import com.snowdreams1006.securityplus.browser.module.system.service.ISysVehicleTypeService; import com.snowdreams1006.securityplus.core.tools.JacksonTools; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.time.DateUtils; import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; import org.springframework.beans.factory.annotation.Autowired; import javax.validation.ValidationException; import java.text.ParseException; import java.util.Date; import java.util.List; import java.util.Objects; import static org.hamcrest.MatcherAssert.assertThat; import static org.hamcrest.Matchers.*; /** * 系统级别车辆类型表 ServiceImpl测试 * * @author snowdreams1006 * @date 2018-05-26 */ @Slf4j @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class SysVehicleTypeServiceImplTest extends BaseTest { @Autowired private ISysVehicleTypeService sysVehicleTypeService; @Test public void testAGetSyncTreeSuccessWithId() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(descendantQuery); assertThat(parent, notNullValue()); assertThat(parent.getId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(parent.getName(), equalTo(LevelTools.ROOT_NAME)); assertThat(parent.getIsRoot(), equalTo(true)); assertThat(parent.getIsParent(), equalTo(true)); assertThat(parent.getChildren(), hasSize(greaterThanOrEqualTo(0))); assertThat(parent.getChildren(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(parent.getChildren(), everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(parent.getChildren(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); log.info(\"同步查询成功: {}\", JacksonTools.object2Json(parent)); } @Test public void testAGetSyncTreeSuccessWithIdAndDate() throws ParseException { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04] SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); descendantQuery.setStartDate(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")); descendantQuery.setEndDate(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\")); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(descendantQuery); assertThat(parent, notNullValue()); assertThat(parent.getId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(parent.getName(), equalTo(LevelTools.ROOT_NAME)); assertThat(parent.getIsRoot(), equalTo(true)); assertThat(parent.getIsParent(), equalTo(true)); assertThat(parent.getChildren(), hasSize(greaterThanOrEqualTo(0))); assertThat(parent.getChildren(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(parent.getChildren(), everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(parent.getChildren(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"gmtCreate\", allOf(greaterThanOrEqualTo(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")), lessThanOrEqualTo(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1)))))); log.info(\"同步查询成功: {}\", JacksonTools.object2Json(parent)); } @Test public void testAGetSyncTreeSuccessWithIdAndType() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,type=[1] List type = Lists.newArrayList(); type.add(RoleTypeEnum.ENTERPRISE.getValue()); SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); descendantQuery.setType(type); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(descendantQuery); assertThat(parent, notNullValue()); assertThat(parent.getId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(parent.getName(), equalTo(LevelTools.ROOT_NAME)); assertThat(parent.getIsRoot(), equalTo(true)); assertThat(parent.getIsParent(), equalTo(true)); assertThat(parent.getChildren(), hasSize(greaterThanOrEqualTo(0))); assertThat(parent.getChildren(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(parent.getChildren(), everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(parent.getChildren(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"type\", isIn(type)))); log.info(\"同步查询成功: {}\", JacksonTools.object2Json(parent)); } @Test public void testAGetSyncTreeSuccessWithNullCondition() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(null); assertThat(parent, notNullValue()); assertThat(parent.getId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getParentId(), equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))); assertThat(parent.getLevel(), equalTo(LevelTools.ROOT_LEVEL)); assertThat(parent.getName(), equalTo(LevelTools.ROOT_NAME)); assertThat(parent.getIsRoot(), equalTo(true)); assertThat(parent.getIsParent(), equalTo(true)); assertThat(parent.getChildren(), hasSize(greaterThanOrEqualTo(0))); assertThat(parent.getChildren(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(parent.getChildren(), everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(parent.getChildren(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(parent.getChildren(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); log.info(\"同步查询成功: {}\", JacksonTools.object2Json(parent)); } @Test public void testAGetSyncTreeFailureBecauseofNullParent() { //查询条件: id=Long.MAX_VALUE SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setId(Long.MAX_VALUE); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(descendantQuery); assertThat(parent, nullValue()); log.info(\"同步查询失败: null\"); } @Test public void testAGetSyncTreeFailureBecauseofNullChildren() { //查询条件: id=93L SysVehicleTypeQuery descendantQuery = new SysVehicleTypeQuery(); descendantQuery.setId(93L); //同步查询 SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(descendantQuery); assertThat(parent, notNullValue()); assertThat(parent.getId(), equalTo(93L)); assertThat(parent.getParentId(), equalTo(1L)); assertThat(parent.getLevel(), equalTo(\"0.1\")); assertThat(parent.getName(), equalTo(\"轻型普通半挂车\")); assertThat(parent.getState(), not(BaseStateEnum.DELETED.getValue())); assertThat(parent.getIsRoot(), equalTo(false)); assertThat(parent.getIsParent(), equalTo(false)); assertThat(parent.getChildren(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"同步查询失败: {}\", JacksonTools.object2Json(parent)); } @Test public void testBListASyncTreeSuccessWithId() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); //异步查询 List children = sysVehicleTypeService.listAsyncTree(childrenQuery); assertThat(children, notNullValue()); assertThat(children, hasSize(greaterThanOrEqualTo(0))); assertThat(children, everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(children, everyItem(hasProperty(\"level\", containsString(childrenQuery.getId().toString())))); assertThat(children, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(children, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(children, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(children, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(children, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(children, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"异步查询成功: {}\", JacksonTools.object2Json(children)); } @Test public void testBListASyncTreeSuccessWithIdAndDate() throws ParseException { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04] SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); childrenQuery.setStartDate(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")); childrenQuery.setEndDate(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\")); //异步查询 List children = sysVehicleTypeService.listAsyncTree(childrenQuery); assertThat(children, hasSize(greaterThanOrEqualTo(0))); assertThat(children, everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(children, everyItem(hasProperty(\"level\", containsString(childrenQuery.getId().toString())))); assertThat(children, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(children, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(children, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(children, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(children, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(children, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(children, everyItem(hasProperty(\"gmtCreate\", allOf(greaterThanOrEqualTo(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")), lessThanOrEqualTo(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1)))))); log.info(\"异步查询成功: {}\", JacksonTools.object2Json(children)); } @Test public void testBListASyncTreeSuccessWithIdAndType() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,type=[1] List type = Lists.newArrayList(); type.add(RoleTypeEnum.ENTERPRISE.getValue()); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); childrenQuery.setType(type); //异步查询 List children = sysVehicleTypeService.listAsyncTree(childrenQuery); assertThat(children, hasSize(greaterThanOrEqualTo(0))); assertThat(children, everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(children, everyItem(hasProperty(\"level\", containsString(childrenQuery.getId().toString())))); assertThat(children, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(children, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(children, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(children, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(children, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(children, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(children, everyItem(hasProperty(\"type\", isIn(type)))); log.info(\"异步查询成功: {}\", JacksonTools.object2Json(children)); } @Test public void testBListASyncTreeSuccessWithNullCondition() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //异步查询 List children = sysVehicleTypeService.listAsyncTree(null); assertThat(children, hasSize(greaterThanOrEqualTo(0))); assertThat(children, everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(children, everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(children, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(children, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(children, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(children, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(children, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(children, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"异步查询成功: {}\", JacksonTools.object2Json(children)); } @Test public void testBListAsyncTreeFailureBecauseofNullParent() { //查询条件: id=Long.MAX_VALUE SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.MAX_VALUE); //异步查询 List children = sysVehicleTypeService.listAsyncTree(childrenQuery); assertThat(children, nullValue()); log.info(\"异步查询失败: null\"); } @Test public void testBListASyncTreeFailureBecauseofNullChildren() { //查询条件: id=93L SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(93L); //异步查询 List children = sysVehicleTypeService.listAsyncTree(childrenQuery); assertThat(children, notNullValue()); assertThat(children, emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"异步查询失败: {}\", JacksonTools.object2Json(children)); } @Test public void testCListPageSuccessWithId() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L Page page = new Page<>(1, 3, \"num\", true); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); //分页查询 page = sysVehicleTypeService.listPage(page, childrenQuery); assertThat(page, notNullValue()); assertThat(page.getCurrent(), equalTo(1)); assertThat(page.getSize(), equalTo(3)); assertThat(page.getPages(), greaterThanOrEqualTo(0L)); assertThat(page.getTotal(), greaterThanOrEqualTo(0L)); assertThat(page.getRecords(), hasSize(greaterThanOrEqualTo(0))); assertThat(page.getRecords(), hasSize(lessThanOrEqualTo(3))); assertThat(page.getRecords(), everyItem(hasProperty(\"parentId\", equalTo(childrenQuery.getId())))); assertThat(page.getRecords(), everyItem(hasProperty(\"level\", containsString(LevelTools.ROOT_LEVEL)))); assertThat(page.getRecords(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(page.getRecords(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(page.getRecords(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(page.getRecords(), everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"分页查询成功: {}\", JacksonTools.object2Json(page)); } @Test public void testCListPageSuccessWithIdAndDate() throws ParseException { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04] Page page = new Page<>(1, 3, \"num\", true); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); childrenQuery.setStartDate(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")); childrenQuery.setEndDate(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\")); //分页查询 page = sysVehicleTypeService.listPage(page, childrenQuery); assertThat(page, notNullValue()); assertThat(page.getCurrent(), equalTo(1)); assertThat(page.getSize(), equalTo(3)); assertThat(page.getPages(), greaterThanOrEqualTo(0L)); assertThat(page.getTotal(), greaterThanOrEqualTo(0L)); assertThat(page.getRecords(), hasSize(greaterThanOrEqualTo(0))); assertThat(page.getRecords(), hasSize(lessThanOrEqualTo(3))); assertThat(page.getRecords(), everyItem(hasProperty(\"parentId\", equalTo(childrenQuery.getId())))); assertThat(page.getRecords(), everyItem(hasProperty(\"level\", containsString(LevelTools.ROOT_LEVEL)))); assertThat(page.getRecords(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(page.getRecords(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(page.getRecords(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(page.getRecords(), everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(page.getRecords(), everyItem(hasProperty(\"gmtCreate\", allOf(greaterThanOrEqualTo(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")), lessThanOrEqualTo(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1)))))); log.info(\"分页查询成功: {}\", JacksonTools.object2Json(page)); } @Test public void testCListPageSuccessWithIdAndType() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: id=0L,type=[1] Page page = new Page<>(1, 3, \"num\", true); List type = Lists.newArrayList(); type.add(RoleTypeEnum.ENTERPRISE.getValue()); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.valueOf(LevelTools.ROOT_LEVEL)); childrenQuery.setType(type); //分页查询 page = sysVehicleTypeService.listPage(page, childrenQuery); assertThat(page, notNullValue()); assertThat(page.getCurrent(), equalTo(1)); assertThat(page.getSize(), equalTo(3)); assertThat(page.getPages(), greaterThanOrEqualTo(0L)); assertThat(page.getTotal(), greaterThanOrEqualTo(0L)); assertThat(page.getRecords(), hasSize(greaterThanOrEqualTo(0))); assertThat(page.getRecords(), hasSize(lessThanOrEqualTo(3))); assertThat(page.getRecords(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(page.getRecords(), everyItem(hasProperty(\"level\", containsString(LevelTools.ROOT_LEVEL)))); assertThat(page.getRecords(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(page.getRecords(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(page.getRecords(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(page.getRecords(), everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(page.getRecords(), everyItem(hasProperty(\"type\", isIn(type)))); log.info(\"分页查询成功: {}\", JacksonTools.object2Json(page)); } @Test public void testCListPageSuccessWithNullCondition() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //分页查询 Page page = sysVehicleTypeService.listPage(null, null); assertThat(page, notNullValue()); assertThat(page.getCurrent(), equalTo(PageTools.DEFAULT_PAGE_CURRENT)); assertThat(page.getSize(), equalTo(PageTools.DEFAULT_PAGE_SIZE)); assertThat(page.getPages(), greaterThanOrEqualTo(0L)); assertThat(page.getTotal(), greaterThanOrEqualTo(0L)); assertThat(page.getRecords(), hasSize(greaterThanOrEqualTo(0))); assertThat(page.getRecords(), hasSize(lessThanOrEqualTo(PageTools.DEFAULT_PAGE_SIZE))); assertThat(page.getRecords(), everyItem(hasProperty(\"parentId\", equalTo(Long.valueOf(LevelTools.ROOT_LEVEL))))); assertThat(page.getRecords(), everyItem(hasProperty(\"level\", equalTo(LevelTools.ROOT_LEVEL)))); assertThat(page.getRecords(), everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(page.getRecords(), everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(page.getRecords(), everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(page.getRecords(), everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(page.getRecords(), everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"分页查询成功: {}\", JacksonTools.object2Json(page)); } @Test public void testCListPageFailureBecauseofNullParent() { //查询条件: id=Long.MAX_VALUE Page page = new Page<>(1, 3, \"num\", true); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(Long.MAX_VALUE); //分页查询 page = sysVehicleTypeService.listPage(page, childrenQuery); assertThat(page, nullValue()); log.info(\"分页查询失败: null\"); } @Test public void testCListPageFailureBecauseofNullChildren() { //查询条件: id=93L Page page = new Page<>(1, 3, \"num\", true); SysVehicleTypeQuery childrenQuery = new SysVehicleTypeQuery(); childrenQuery.setId(93L); //分页查询 page = sysVehicleTypeService.listPage(page, childrenQuery); assertThat(page, notNullValue()); assertThat(page.getCurrent(), equalTo(1)); assertThat(page.getSize(), equalTo(3)); assertThat(page.getPages(), equalTo(0L)); assertThat(page.getTotal(), equalTo(0L)); assertThat(page.getRecords(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"分页查询失败: {}\", JacksonTools.object2Json(page)); } @Test public void testDListConditionSuccessWithName() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: name=半挂车 SysVehicleTypeQuery sysVehicleTypeQuery = new SysVehicleTypeQuery(); sysVehicleTypeQuery.setName(\"半挂车\"); //条件查询 List results = sysVehicleTypeService.listCondition(sysVehicleTypeQuery); assertThat(results, notNullValue()); assertThat(results, hasSize(greaterThanOrEqualTo(0))); assertThat(results, everyItem(hasProperty(\"name\", containsString(\"半挂车\")))); assertThat(results, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(results, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(results, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(results, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(results, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(results, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"条件查询成功: {}\", JacksonTools.object2Json(results)); } @Test public void testDListConditionSuccessWithNameAndDate() throws ParseException { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: name=半挂车,gmtCreate=[2018-06-04,2018-07-04] SysVehicleTypeQuery sysVehicleTypeQuery = new SysVehicleTypeQuery(); sysVehicleTypeQuery.setName(\"半挂车\"); sysVehicleTypeQuery.setStartDate(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")); sysVehicleTypeQuery.setEndDate(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\")); //条件查询 List results = sysVehicleTypeService.listCondition(sysVehicleTypeQuery); assertThat(results, notNullValue()); assertThat(results, hasSize(greaterThanOrEqualTo(0))); assertThat(results, everyItem(hasProperty(\"name\", containsString(\"半挂车\")))); assertThat(results, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(results, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(results, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(results, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(results, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(results, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(results, everyItem(hasProperty(\"gmtCreate\", allOf(greaterThanOrEqualTo(DateUtils.parseDate(\"2018-06-04\", \"yyyy-MM-dd\")), lessThanOrEqualTo(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1)))))); log.info(\"条件查询成功: {}\", JacksonTools.object2Json(results)); } @Test public void testDListConditionSuccessWithNameAndType() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //查询条件: name=半挂车,type=[1] List type = Lists.newArrayList(); type.add(RoleTypeEnum.ENTERPRISE.getValue()); SysVehicleTypeQuery sysVehicleTypeQuery = new SysVehicleTypeQuery(); sysVehicleTypeQuery.setName(\"半挂车\"); sysVehicleTypeQuery.setType(type); //条件查询 List results = sysVehicleTypeService.listCondition(sysVehicleTypeQuery); assertThat(results, notNullValue()); assertThat(results, hasSize(greaterThanOrEqualTo(0))); assertThat(results, everyItem(hasProperty(\"name\", containsString(\"半挂车\")))); assertThat(results, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(results, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(results, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(results, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(results, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(results, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); assertThat(results, everyItem(hasProperty(\"type\", isIn(type)))); log.info(\"条件查询成功: {}\", JacksonTools.object2Json(results)); } @Test public void testDListConditionSuccessWithNullCondition() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //条件查询 List results = sysVehicleTypeService.listCondition(null); assertThat(results, notNullValue()); assertThat(results, hasSize(greaterThanOrEqualTo(0))); assertThat(results, everyItem(hasProperty(\"state\", not(BaseStateEnum.DELETED.getValue())))); if (!ShiroTools.isAdmin()) { assertThat(results, everyItem(hasProperty(\"tenantId\", equalTo(tenantId)))); assertThat(results, everyItem(hasProperty(\"tenantType\", equalTo(tenantType)))); assertThat(results, everyItem(hasProperty(\"tenantName\", equalTo(tenantName)))); } assertThat(results, everyItem(hasProperty(\"isRoot\", equalTo(false)))); assertThat(results, everyItem(hasProperty(\"children\", emptyCollectionOf(SysVehicleTypeDto.class)))); log.info(\"条件查询成功: {}\", JacksonTools.object2Json(results)); } @Test public void testDListConditionFailureBecauseofNullResult() { //查询条件: id=Long.MAX_VALUE SysVehicleTypeQuery sysVehicleTypeQuery = new SysVehicleTypeQuery(); sysVehicleTypeQuery.setId(Long.MAX_VALUE); //条件查询 List results = sysVehicleTypeService.listCondition(sysVehicleTypeQuery); assertThat(results, notNullValue()); assertThat(results, emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"条件查询失败: {}\", JacksonTools.object2Json(results)); } @Test public void testEGetOneSuccess() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //精确查询: id=1L SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.getOne(1L); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), equalTo(1L)); assertThat(sysVehicleTypeDto.getState(), not(BaseStateEnum.DELETED.getValue())); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeDto.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleTypeDto.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleTypeDto.getTenantName(), equalTo(tenantName)); } assertThat(sysVehicleTypeDto.getIsRoot(), equalTo(false)); log.info(\"精确查询成功: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); } @Test public void testEGetOneFailureBecauseofNullCondition() { try { //精确查询: id=null SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.getOne(null); assertThat(sysVehicleTypeDto, nullValue()); } catch (NullPointerException e) { assertThat(e.getMessage(), equalTo(\"待查询的车辆类型id[null]不存在\")); log.info(\"精确查询失败: {}\", e); } } @Test public void testEGetOneFailureBecauseofNullResult() { //精确查询: id=Long.MAX_VALUE SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.getOne(Long.MAX_VALUE); assertThat(sysVehicleTypeDto, nullValue()); log.info(\"精确查询失败: null\"); } @Test public void testFAddOneSuccessWithFullArgs() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); Integer source = ShiroTools.isAdmin() ? RoleSourceEnum.SYSTEM_ROLE.getValue() : RoleSourceEnum.NORMAL_ROLE.getValue(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认新增完整参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleTypeParam.setRemark(\"新增成功:完整参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); sysVehicleTypeParam.setOwnerEnterpriseId(enterpriseId); sysVehicleTypeParam.setOwnerEnterpriseName(enterpriseName); sysVehicleTypeParam.setOwnerUserId(userId); sysVehicleTypeParam.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleTypeParam.setTenantId(tenantId); } sysVehicleTypeParam.setTenantType(tenantType); sysVehicleTypeParam.setTenantName(tenantName); //新增 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), notNullValue()); assertThat(sysVehicleTypeDto.getParentId(), equalTo(sysVehicleTypeParam.getParentId())); assertThat(sysVehicleTypeDto.getLevel(), containsString(sysVehicleTypeParam.getParentId().toString())); assertThat(sysVehicleTypeDto.getNum(), equalTo(sysVehicleTypeParam.getNum())); assertThat(sysVehicleTypeDto.getType(), equalTo(sysVehicleTypeParam.getType())); assertThat(sysVehicleTypeDto.getName(), equalTo(sysVehicleTypeParam.getName())); assertThat(sysVehicleTypeDto.getRemark(), equalTo(sysVehicleTypeParam.getRemark())); assertThat(sysVehicleTypeDto.getState(), equalTo(sysVehicleTypeParam.getState())); assertThat(sysVehicleTypeDto.getOwnerEnterpriseId(), equalTo(sysVehicleTypeParam.getOwnerEnterpriseId())); assertThat(sysVehicleTypeDto.getOwnerEnterpriseName(), equalTo(sysVehicleTypeParam.getOwnerEnterpriseName())); assertThat(sysVehicleTypeDto.getOwnerUserId(), equalTo(sysVehicleTypeParam.getOwnerUserId())); assertThat(sysVehicleTypeDto.getOwnerUserName(), equalTo(sysVehicleTypeParam.getOwnerUserName())); assertThat(sysVehicleTypeDto.getCreateEnterpriseId(), equalTo(currentUser.getOwnerEnterpriseId())); assertThat(sysVehicleTypeDto.getCreateEnterpriseName(), equalTo(currentUser.getOwnerEnterpriseName())); assertThat(sysVehicleTypeDto.getModifiedEnterpriseId(), equalTo(currentUser.getOwnerEnterpriseId())); assertThat(sysVehicleTypeDto.getModifiedEnterpriseName(), equalTo(currentUser.getOwnerEnterpriseName())); assertThat(sysVehicleTypeDto.getCreateUserId(), equalTo(currentUser.getOwnerUserId())); assertThat(sysVehicleTypeDto.getCreateUserName(), equalTo(currentUser.getOwnerUserName())); assertThat(sysVehicleTypeDto.getModifiedUserId(), equalTo(currentUser.getOwnerUserId())); assertThat(sysVehicleTypeDto.getModifiedUserName(), equalTo(currentUser.getOwnerUserName())); assertThat(sysVehicleTypeDto.getTenantId(), equalTo(sysVehicleTypeParam.getTenantId())); assertThat(sysVehicleTypeDto.getTenantType(), equalTo(sysVehicleTypeParam.getTenantType())); assertThat(sysVehicleTypeDto.getTenantName(), equalTo(sysVehicleTypeParam.getTenantName())); assertThat(sysVehicleTypeDto.getGmtCreate(), notNullValue()); assertThat(sysVehicleTypeDto.getGmtModified(), notNullValue()); assertThat(sysVehicleTypeDto.getIsRoot(), equalTo(false)); assertThat(sysVehicleTypeDto.getIsParent(), equalTo(false)); assertThat(sysVehicleTypeDto.getChildren(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); } @Test public void testFAddOneSuccessWithRequiredArgs() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); Integer source = ShiroTools.isAdmin() ? RoleSourceEnum.SYSTEM_ROLE.getValue() : RoleSourceEnum.NORMAL_ROLE.getValue(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认新增必须参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleTypeParam.setRemark(\"新增成功:必须参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); //新增 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), notNullValue()); assertThat(sysVehicleTypeDto.getParentId(), equalTo(sysVehicleTypeParam.getParentId())); assertThat(sysVehicleTypeDto.getLevel(), containsString(sysVehicleTypeParam.getParentId().toString())); assertThat(sysVehicleTypeDto.getNum(), equalTo(sysVehicleTypeParam.getNum())); assertThat(sysVehicleTypeDto.getType(), equalTo(sysVehicleTypeParam.getType())); assertThat(sysVehicleTypeDto.getName(), equalTo(sysVehicleTypeParam.getName())); assertThat(sysVehicleTypeDto.getRemark(), equalTo(sysVehicleTypeParam.getRemark())); assertThat(sysVehicleTypeDto.getState(), equalTo(sysVehicleTypeParam.getState())); assertThat(sysVehicleTypeDto.getOwnerEnterpriseId(), equalTo(enterpriseId)); assertThat(sysVehicleTypeDto.getOwnerEnterpriseName(), equalTo(enterpriseName)); assertThat(sysVehicleTypeDto.getOwnerUserId(), equalTo(userId)); assertThat(sysVehicleTypeDto.getOwnerUserName(), equalTo(userName)); assertThat(sysVehicleTypeDto.getCreateEnterpriseId(), equalTo(currentUser.getOwnerEnterpriseId())); assertThat(sysVehicleTypeDto.getCreateEnterpriseName(), equalTo(currentUser.getOwnerEnterpriseName())); assertThat(sysVehicleTypeDto.getModifiedEnterpriseId(), equalTo(currentUser.getOwnerEnterpriseId())); assertThat(sysVehicleTypeDto.getModifiedEnterpriseName(), equalTo(currentUser.getOwnerEnterpriseName())); assertThat(sysVehicleTypeDto.getCreateUserId(), equalTo(currentUser.getOwnerUserId())); assertThat(sysVehicleTypeDto.getCreateUserName(), equalTo(currentUser.getOwnerUserName())); assertThat(sysVehicleTypeDto.getModifiedUserId(), equalTo(currentUser.getOwnerUserId())); assertThat(sysVehicleTypeDto.getModifiedUserName(), equalTo(currentUser.getOwnerUserName())); assertThat(sysVehicleTypeDto.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleTypeDto.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleTypeDto.getTenantName(), equalTo(tenantName)); assertThat(sysVehicleTypeDto.getGmtCreate(), notNullValue()); assertThat(sysVehicleTypeDto.getGmtModified(), notNullValue()); assertThat(sysVehicleTypeDto.getIsRoot(), equalTo(false)); assertThat(sysVehicleTypeDto.getIsParent(), equalTo(false)); assertThat(sysVehicleTypeDto.getChildren(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"新增成功: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); } @Test public void testFAddOneFailureBecauseofInvalidArgs() { //默认新增无效参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() // .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增失败\") .build(); sysVehicleTypeParam.setRemark(\"新增失败:无效参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); try { //新增 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, nullValue()); } catch (ValidationException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(\"parentId=上级车辆类型id不存在\")); log.info(\"新增失败: {}\", e); } } @Test public void testFAddOneFailureBecauseofIllegalArgs() { //默认新增非法参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"半挂车\") .build(); sysVehicleTypeParam.setRemark(\"新增失败:非法参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); try { //新增 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, nullValue()); } catch (IllegalArgumentException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(String.format(\"同一层级下的车辆类型[%s]已存在\", \"半挂车\"))); log.info(\"新增失败: {}\", e); } } @Test public void testGUpdateOneSuccessWithAlone() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新成功\"); sysVehicleTypeParam.setRemark(\"更新成功:单独更新\"); //更新 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), equalTo(sysVehicleTypeParam.getId())); assertThat(sysVehicleTypeDto.getNum(), equalTo(sysVehicleTypeParam.getNum())); assertThat(sysVehicleTypeDto.getName(), equalTo(sysVehicleTypeParam.getName())); assertThat(sysVehicleTypeDto.getRemark(), equalTo(sysVehicleTypeParam.getRemark())); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeDto.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleTypeDto.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleTypeDto.getTenantName(), equalTo(tenantName)); } assertThat(sysVehicleTypeDto.getGmtModified(), greaterThanOrEqualTo(DateUtils.addSeconds(new Date(), -10))); assertThat(sysVehicleTypeDto.getIsRoot(), equalTo(false)); assertThat(sysVehicleTypeDto.getIsParent(), equalTo(false)); assertThat(sysVehicleTypeDto.getChildren(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"更新成功: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); } @Test public void testGUpdateOneSuccessWithDescendant() { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //测试数据 SysVehicleTypeDto parentDto = prepareTestData(null); SysVehicleTypeParam childParam = SysVehicleTypeParam.builder() .parentId(parentDto.getId()) .num(1) .type(parentDto.getType()) .name(parentDto.getName() + \":子车辆类型\") .build(); childParam.setRemark(parentDto.getRemark() + \":子车辆类型\"); childParam.setState(parentDto.getState()); prepareTestData(childParam); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(parentDto)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新成功\"); sysVehicleTypeParam.setRemark(\"更新成功:后代更新\"); //更新 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), equalTo(sysVehicleTypeParam.getId())); assertThat(sysVehicleTypeDto.getNum(), equalTo(sysVehicleTypeParam.getNum())); assertThat(sysVehicleTypeDto.getName(), equalTo(sysVehicleTypeParam.getName())); assertThat(sysVehicleTypeDto.getRemark(), equalTo(sysVehicleTypeParam.getRemark())); if (!ShiroTools.isAdmin()) { assertThat(sysVehicleTypeDto.getTenantId(), equalTo(tenantId)); assertThat(sysVehicleTypeDto.getTenantType(), equalTo(tenantType)); assertThat(sysVehicleTypeDto.getTenantName(), equalTo(tenantName)); } assertThat(sysVehicleTypeDto.getGmtModified(), greaterThanOrEqualTo(DateUtils.addSeconds(new Date(), -10))); assertThat(sysVehicleTypeDto.getIsRoot(), equalTo(false)); assertThat(sysVehicleTypeDto.getIsParent(), equalTo(true)); assertThat(sysVehicleTypeDto.getChildren(), emptyCollectionOf(SysVehicleTypeDto.class)); log.info(\"更新成功: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); } @Test public void testGUpdateOneFailureBecauseofInvalidArgs() { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新失败\"); sysVehicleTypeParam.setParentId(null); sysVehicleTypeParam.setRemark(\"更新失败:无效参数\"); try { //更新 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, nullValue()); } catch (ValidationException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(\"parentId=上级车辆类型id不存在\")); log.info(\"更新失败: {}\", e); } } @Test public void testGUpdateOneFailureBecauseofIllegalArgs() { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeDto repeat = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(repeat.getName()); sysVehicleTypeParam.setRemark(\"更新失败:非法参数\"); try { //更新 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, nullValue()); } catch (IllegalArgumentException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(String.format(\"同一层级下的车辆类型[%s]已存在\", sysVehicleTypeParam.getName()))); log.info(\"更新失败: {}\", e); } } @Test public void testGUpdateOneFailureBecauseofNullIdArgs() { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新失败\"); sysVehicleTypeParam.setId(null); sysVehicleTypeParam.setRemark(\"更新失败:主键缺失\"); try { //更新 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, nullValue()); } catch (NullPointerException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(String.format(\"待更新的车辆类型id[%s]不存在\", sysVehicleTypeParam.getName()))); log.info(\"更新失败: {}\", e); } } @Test public void testHDeleteOneSuccess() { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); //删除 sysVehicleTypeService.deleteOne(prepare.getId()); log.info(\"删除成功\"); } @Test public void testHDeleteOneFailureBecauseofInvalidlArgs() { try { //删除 sysVehicleTypeService.deleteOne(Long.MAX_VALUE); assertThat(\"正常情况下你看不到我,否则断言失败\", true, equalTo(false)); } catch (NullPointerException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(String.format(\"待删除的车辆类型id[%s]不存在\", Long.MAX_VALUE))); log.info(\"删除失败: {}\", e); } } @Test public void testHDeleteOneFailureBecauseofIllegalArgs() { //测试数据 SysVehicleTypeDto parentDto = prepareTestData(null); SysVehicleTypeParam childParam = SysVehicleTypeParam.builder() .parentId(parentDto.getId()) .num(1) .type(parentDto.getType()) .name(parentDto.getName() + \":子车辆类型\") .build(); childParam.setRemark(parentDto.getRemark() + \":子车辆类型\"); childParam.setState(parentDto.getState()); prepareTestData(childParam); try { //删除 sysVehicleTypeService.deleteOne(parentDto.getId()); assertThat(\"正常情况下你看不到我,否则断言失败\", true, equalTo(false)); } catch (IllegalArgumentException e) { assertThat(e.getMessage(), notNullValue()); assertThat(e.getMessage(), equalTo(String.format(\"待删除的车辆类型[%s]存在子车辆类型\", parentDto.getName()))); } } /** * 准备测试数据 * * @return 新增单个车辆类型 */ private SysVehicleTypeDto prepareTestData(SysVehicleTypeParam sysVehicleTypeParam) { //测试数据 if (Objects.isNull(sysVehicleTypeParam)) { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认测试数据 sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"测试数据:\" + StringTools.getRandomString(6)) .build(); sysVehicleTypeParam.setRemark(\"测试数据:\" + StringTools.getRandomString(6)); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); sysVehicleTypeParam.setOwnerEnterpriseId(enterpriseId); sysVehicleTypeParam.setOwnerEnterpriseName(enterpriseName); sysVehicleTypeParam.setOwnerUserId(userId); sysVehicleTypeParam.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleTypeParam.setTenantId(tenantId); } sysVehicleTypeParam.setTenantType(tenantType); sysVehicleTypeParam.setTenantName(tenantName); } //新增 SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); assertThat(sysVehicleTypeDto, notNullValue()); assertThat(sysVehicleTypeDto.getId(), notNullValue()); log.info(\"测试数据: {}\", JacksonTools.object2Json(sysVehicleTypeDto)); return sysVehicleTypeDto; } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 09:11:49 "},"docs/practice/normal/controller.html":{"url":"docs/practice/normal/controller.html","title":"controller","keywords":"","body":"controller 基本规则如下: controller 继承统一基类 AbstractController ,可根据实际情况决定是否重写某些方法; 类名：大驼峰命名+Controller 规范,默认注释业务模型,并加上 @Controller @RequestMapping @Api 等注解说明; 方法名: 返回页面的请求以 .page 结尾,返回数据的请求以.json结尾,例如请求路径: /system/vehicleType/index.page 则方法名: indexPage; 找到 SysRoleController 角色 web 控制类,并复制重命名为 SysVehicleTypeController,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeController 文件; SysVehicleTypeController package com.snowdreams1006.securityplus.browser.module.system.web; import com.baomidou.mybatisplus.plugins.Page; import com.fasterxml.jackson.annotation.JsonView; import com.google.common.base.Preconditions; import com.snowdreams1006.securityplus.browser.base.beans.PageInfoBT; import com.snowdreams1006.securityplus.browser.base.tools.PageTools; import com.snowdreams1006.securityplus.browser.base.web.AbstractController; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.entity.SysVehicleType; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import com.snowdreams1006.securityplus.browser.module.system.query.SysVehicleTypeQuery; import com.snowdreams1006.securityplus.browser.module.system.service.ISysVehicleTypeService; import com.snowdreams1006.securityplus.core.enums.ResultEnum; import com.snowdreams1006.securityplus.core.result.Result; import com.snowdreams1006.securityplus.core.tools.ResultTools; import io.swagger.annotations.*; import org.apache.commons.collections.CollectionUtils; import org.apache.shiro.authz.annotation.RequiresPermissions; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.validation.BindingResult; import org.springframework.web.bind.annotation.*; import springfox.documentation.annotations.ApiIgnore; import javax.validation.Valid; import java.util.List; import java.util.Objects; /** * 车辆类型管理 controller * * @author snowdreams1006 * @date 2018-05-17 */ @Controller @RequestMapping(\"/system/vehicleType\") @Api(value = \"vehicleType\", tags = {\"/system/vehicleType\"}, description = \"车辆类型管理 controller\") public class SysVehicleTypeController extends AbstractController { /** * 车辆类型管理页面路径前缀 */ private static final String PREFIX = \"module/system/vehicleType/\"; private final ISysVehicleTypeService sysVehicleTypeService; @Autowired public SysVehicleTypeController(ISysVehicleTypeService sysVehicleTypeService) { this.sysVehicleTypeService = sysVehicleTypeService; } /** * GET 请求跳转到车辆类型管理菜单页面(有权限控制) */ @RequiresPermissions(\"/system/vehicleType/index.page\") @GetMapping(\"/index.page\") @ApiOperation(value = \"GET 请求跳转到车辆类型管理菜单页面(有权限控制)\", httpMethod = \"GET\") public String indexPage() { return PREFIX + \"index.html\"; } /** * GET 请求跳转到新增车辆类型页面(有权限控制) */ @RequiresPermissions(\"/system/vehicleType/add.page\") @GetMapping(\"/add.page\") @ApiOperation(value = \"GET 请求跳转到新增车辆类型页面(有权限控制)\", httpMethod = \"GET\") public String addPage() { return PREFIX + \"add.html\"; } /** * GET 请求跳转到更新车辆类型页面(有权限控制) */ @RequiresPermissions(\"/system/vehicleType/update.page/{id}\") @GetMapping(\"/update.page/{id}\") @ApiOperation(value = \"GET 请求跳转到更新车辆类型页面(有权限控制)\", httpMethod = \"GET\") public String updatePage(@PathVariable @ApiParam(value = \"车辆类型id\", required = true) Long id, @ApiIgnore Model model) { SysVehicleTypeDto vehicleType = sysVehicleTypeService.getOne(id); Preconditions.checkNotNull(vehicleType, String.format(\"待更新的车辆类型id[%s]不存在\", id)); model.addAttribute(\"vehicleType\", vehicleType); return PREFIX + \"update.html\"; } /** * GET 请求同步查询车辆类型树(有权限控制,并返回详细视图) */ @RequiresPermissions(\"/system/vehicleType/syncTree.json\") @GetMapping(\"/syncTree.json\") @ResponseBody @JsonView(SysVehicleType.DetailView.class) @ApiOperation(value = \"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)\", httpMethod = \"GET\") @ApiImplicitParams({ @ApiImplicitParam(name = \"id\", value = \"上级车辆类型id\", defaultValue = \"0\", dataType = \"long\", paramType = \"query\", required = true), @ApiImplicitParam(name = \"name\", value = \"名称\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"type\", value = \"类型\", dataType = \"int\", paramType = \"query\", allowMultiple = true), @ApiImplicitParam(name = \"startDate\", value = \"创建日期开始日期\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"endDate\", value = \"创建日期结束日期\", dataType = \"string\", paramType = \"query\") }) public Result syncTreeJson(@ApiIgnore SysVehicleTypeQuery sysVehicleTypeQuery) { SysVehicleTypeDto parent = sysVehicleTypeService.getSyncTree(sysVehicleTypeQuery); if (Objects.isNull(parent)) { return ResultTools.inexistence(\"同步查询的父车辆类型不存在\"); } if (CollectionUtils.isEmpty(parent.getChildren())) { return ResultTools.inexistence(\"同步查询的子车辆类型不存在\"); } return ResultTools.success(parent); } /** * GET 请求异步查询车辆类型树(有权限控制,并返回简单视图) */ @RequiresPermissions(\"/system/vehicleType/asyncTree.json\") @GetMapping(\"/asyncTree.json\") @ResponseBody @JsonView(SysVehicleType.SimpleView.class) @ApiOperation(value = \"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)\", httpMethod = \"GET\") @ApiImplicitParams({ @ApiImplicitParam(name = \"id\", value = \"上级车辆类型id\", defaultValue = \"0\", dataType = \"long\", paramType = \"query\", required = true), @ApiImplicitParam(name = \"name\", value = \"名称\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"type\", value = \"类型\", dataType = \"int\", paramType = \"query\", allowMultiple = true), @ApiImplicitParam(name = \"startDate\", value = \"创建日期开始日期\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"endDate\", value = \"创建日期结束日期\", dataType = \"string\", paramType = \"query\") }) public Result asyncTreeJson(@ApiIgnore SysVehicleTypeQuery sysVehicleTypeQuery) { List children = sysVehicleTypeService.listAsyncTree(sysVehicleTypeQuery); if (Objects.isNull(children)) { return ResultTools.inexistence(\"异步查询的父车辆类型不存在\"); } if (CollectionUtils.isEmpty(children)) { return ResultTools.inexistence(\"异步查询的子车辆类型不存在\"); } return ResultTools.success(children); } /** * GET 请求分页查询车辆类型(有权限控制,相当于全部视图) */ @RequiresPermissions(\"/system/vehicleType/listPage.json\") @GetMapping(\"/listPage.json\") @ResponseBody @ApiOperation(value = \"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)\", httpMethod = \"GET\") @ApiImplicitParams({ @ApiImplicitParam(name = \"limit\", value = \"请求记录数\", defaultValue = \"10\", dataType = \"int\", paramType = \"query\"), @ApiImplicitParam(name = \"offset\", value = \"请求偏移量\", defaultValue = \"0\", dataType = \"int\", paramType = \"query\"), @ApiImplicitParam(name = \"sort\", value = \"排序字段名称\", defaultValue = \"id\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"order\", value = \"升序或降序\", defaultValue = \"asc\", allowableValues = \"asc,desc\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"id\", value = \"上级车辆类型id\", defaultValue = \"0\", dataType = \"long\", paramType = \"query\", required = true), @ApiImplicitParam(name = \"name\", value = \"名称\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"type\", value = \"类型\", dataType = \"int\", paramType = \"query\", allowMultiple = true), @ApiImplicitParam(name = \"startDate\", value = \"创建日期开始日期\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"endDate\", value = \"创建日期结束日期\", dataType = \"string\", paramType = \"query\") }) public Result listPageJson(@ApiIgnore SysVehicleTypeQuery sysVehicleTypeQuery) { Page page = new PageTools().buildPage(); page = sysVehicleTypeService.listPage(page, sysVehicleTypeQuery); if (Objects.isNull(page)) { return ResultTools.inexistence(\"分页查询的父车辆类型不存在\"); } PageInfoBT pageInfoBT = new PageTools().packForBT(page); if (Objects.equals(pageInfoBT.getTotal(), 0L)) { return ResultTools.inexistence(\"分页查询的子车辆类型不存在\"); } return ResultTools.success(pageInfoBT); } /** * GET 请求条件查询车辆类型(有权限控制,并返回简单视图) */ @RequiresPermissions(\"/system/vehicleType/listCondition.json\") @GetMapping(\"/listCondition.json\") @ResponseBody @JsonView(SysVehicleType.SimpleView.class) @ApiOperation(value = \"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)\", httpMethod = \"GET\") @ApiImplicitParams({ @ApiImplicitParam(name = \"id\", value = \"上级车辆类型id\", defaultValue = \"0\", dataType = \"long\", paramType = \"query\", required = true), @ApiImplicitParam(name = \"name\", value = \"名称\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"type\", value = \"类型\", dataType = \"int\", paramType = \"query\", allowMultiple = true), @ApiImplicitParam(name = \"startDate\", value = \"创建日期开始日期\", dataType = \"string\", paramType = \"query\"), @ApiImplicitParam(name = \"endDate\", value = \"创建日期结束日期\", dataType = \"string\", paramType = \"query\") }) public Result listConditionJson(@ApiIgnore SysVehicleTypeQuery sysVehicleTypeQuery) { List results = sysVehicleTypeService.listCondition(sysVehicleTypeQuery); if (CollectionUtils.isEmpty(results)) { return ResultTools.inexistence(\"条件查询的车辆类型不存在\"); } return ResultTools.success(results); } /** * POST 请求新增车辆类型(有权限控制,并返回详细视图) */ @RequiresPermissions(\"/system/vehicleType/add.json\") @PostMapping(\"/add.json\") @ResponseBody @JsonView(SysVehicleType.DetailView.class) @ApiOperation(value = \"POST 请求新增车辆类型(有权限控制,并返回详细视图)\", httpMethod = \"POST\") public Result addJson(@Valid @RequestBody @ApiParam(value = \"请提供json格式的车辆类型参数\", required = true) SysVehicleTypeParam sysVehicleTypeParam, BindingResult errors) { Result validateResult = super.validate(errors); if (!Objects.equals(ResultEnum.SUCCESS.getCode(), validateResult.getCode())) { return validateResult; } SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.addOne(sysVehicleTypeParam); return ResultTools.success(sysVehicleTypeDto); } /** * PUT 请求更新车辆类型(有权限控制,并返回详细视图) */ @RequiresPermissions(\"/system/vehicleType/update.json\") @PutMapping(\"/update.json\") @ResponseBody @JsonView(SysVehicleType.DetailView.class) @ApiOperation(value = \"PUT 请求更新车辆类型(有权限控制,并返回详细视图)\", httpMethod = \"PUT\") public Result updateJson(@Valid @RequestBody @ApiParam(value = \"请提供json格式的车辆类型参数\", required = true) SysVehicleTypeParam sysVehicleTypeParam, BindingResult errors) { Result validateResult = super.validate(errors); if (!Objects.equals(ResultEnum.SUCCESS.getCode(), validateResult.getCode())) { return validateResult; } if (Objects.isNull(sysVehicleTypeParam.getId())) { return ResultTools.invalid(String.format(\"待更新的车辆类型id[%s]不存在\", sysVehicleTypeParam.getName())); } SysVehicleTypeDto sysVehicleTypeDto = sysVehicleTypeService.updateOne(sysVehicleTypeParam); return ResultTools.success(sysVehicleTypeDto); } /** * DELETE 请求删除车辆类型(有权限控制) */ @RequiresPermissions(\"/system/vehicleType/delete.json/{id}\") @DeleteMapping(\"/delete.json/{id}\") @ResponseBody @ApiOperation(value = \"DELETE 请求删除车辆类型(有权限控制)\", httpMethod = \"DELETE\") public Result deleteJson(@PathVariable(\"id\") @ApiParam(value = \"车辆类型id\", required = true) Long id) { sysVehicleTypeService.deleteOne(id); return ResultTools.success(); } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 09:24:35 "},"docs/practice/normal/controllerTest.html":{"url":"docs/practice/normal/controllerTest.html","title":"controllerTest","keywords":"","body":"controllerTest 基本规则如下: controllerTest 继承统一基类 BaseTest ,可根据实际情况决定是否重写某些方法; 类名：大驼峰命名+ControllerTest 规范,默认注释同数据表注释,并加上@FixMethodOrder等注解说明; 测试方法名: test+(大写字母)+(方法名)+SuccessWith+(条件) 或者 test+(大写字母)+(方法名)+FailureBecauseof+(原因); 找到 SysRoleControllerTest 角色 controllerTest 测试类,并复制重命名为 SysVehicleTypeControllerTest,同时打开两个窗口,方便编辑; 根据实际情况,编写 SysVehicleTypeControllerTest 文件,此时运行发现均无权限; 新增相应的权限,两种方式: 一种是数据库直接插入,另一种是页面新增; 登录系统为相应的角色分配权限,然后为用户分配该角色; 再次执行测试用例,此时状态码由 403 变成 200 ,并且测试全部通过; 插入 车辆类型 的权限 sql SELECT * FROM zui56.sys_access; INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `code`, `url`, `type`, `remark`,`gmt_create`) VALUES (8, 0.8, 20, '车辆类型管理','vehicleType', '/system/vehicleType/index.page', '2', '自动生成: 系统模块:车辆类型管理',NOW()); set @newparentModuleId = @@identity; INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '1', '跳转到新增车辆类型页面', '/system/vehicleType/add.page', '3', '自动生成: 从 车辆类型管理菜单页面跳转到新增车辆类型页面',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '2', '跳转到更新车辆类型页面', '/system/vehicleType/update.page/{id}', '3', '自动生成: 从车辆类型管理菜单页面跳转到更新车辆类型页面',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '3', '同步查询车辆类型树', '/system/vehicleType/syncTree.json', '4', '自动生成: 同步查询车辆类型树请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '4', '异步查询车辆类型树', '/system/vehicleType/asyncTree.json', '4', '自动生成: 异步查询车辆类型树请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '5', '分页查询车辆类型列表', '/system/vehicleType/listPage.json', '4', '自动生成: 分页查询车辆类型列表请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '6', '条件查询车辆类型列表', '/system/vehicleType/listCondition.json', '4', '自动生成: 条件查询车辆类型列表请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '7', '新增车辆类型', '/system/vehicleType/add.json', '4', '自动生成: 新增车辆类型请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '8', '更新车辆类型', '/system/vehicleType/update.json', '4', '自动生成: 更新车辆类型请求',NOW()); INSERT INTO `sys_access` (`parent_id`, `level`, `num`, `name`, `url`, `type`, `remark`,`gmt_create`) VALUES (@newparentModuleId, concat(0.8,'.',@newparentModuleId), '9', '删除车辆类型', '/system/vehicleType/delete.json/{id}', '4', '自动生成: 删除车辆类型请求',NOW()); SELECT * FROM sys_access ORDER BY id ASC; SysVehicleTypeControllerTest package com.snowdreams1006.securityplus.browser.module.system.web; import com.fasterxml.jackson.core.type.TypeReference; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.snowdreams1006.securityplus.browser.base.BaseTest; import com.snowdreams1006.securityplus.browser.base.enums.BaseStateEnum; import com.snowdreams1006.securityplus.browser.base.enums.RoleSourceEnum; import com.snowdreams1006.securityplus.browser.base.enums.VehicleTypeEnum; import com.snowdreams1006.securityplus.browser.base.tools.LevelTools; import com.snowdreams1006.securityplus.browser.base.tools.PageTools; import com.snowdreams1006.securityplus.browser.base.tools.ShiroTools; import com.snowdreams1006.securityplus.browser.base.tools.StringTools; import com.snowdreams1006.securityplus.browser.module.system.dto.SysUserDto; import com.snowdreams1006.securityplus.browser.module.system.dto.SysVehicleTypeDto; import com.snowdreams1006.securityplus.browser.module.system.param.SysVehicleTypeParam; import com.snowdreams1006.securityplus.core.enums.ResultEnum; import com.snowdreams1006.securityplus.core.result.Result; import com.snowdreams1006.securityplus.core.tools.JacksonTools; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.time.DateFormatUtils; import org.apache.commons.lang3.time.DateUtils; import org.junit.FixMethodOrder; import org.junit.Test; import org.junit.runners.MethodSorters; import org.springframework.http.HttpStatus; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import java.util.Date; import java.util.Objects; import static org.hamcrest.Matchers.*; import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*; import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print; import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*; /** * 车辆类型管理 controllerTest * * @author snowdreams1006 * @date 2018-05-93 */ @Slf4j @FixMethodOrder(MethodSorters.NAME_ASCENDING) public class SysVehicleTypeControllerTest extends BaseTest { /** * 车辆类型管理页面路径前缀 */ private static final String PREFIX = \"module/system/vehicleType/\"; @Test public void testAIndexPageSuccess() throws Exception { //GET 请求跳转到车辆类型管理菜单页面(有权限控制) String result = mockMvc.perform( get(\"/system/vehicleType/index.page\") .contentType(MediaType.TEXT_HTML_VALUE) ) .andExpect(status().isOk()) .andExpect(view().name(PREFIX + \"index.html\")) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求跳转到车辆类型管理菜单页面(有权限控制)成功: {}\", result); } @Test public void testBAddPageSuccess() throws Exception { //GET 请求跳转到新增车辆类型页面(有权限控制) String result = mockMvc.perform( get(\"/system/vehicleType/add.page\") .contentType(MediaType.TEXT_HTML_VALUE) ) .andExpect(status().isOk()) .andExpect(view().name(PREFIX + \"add.html\")) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求跳转到新增车辆类型页面(有权限控制)成功: {}\", result); } @Test public void testCUpdatePageSuccess() throws Exception { //GET 请求跳转到更新车辆类型页面(有权限控制) String result = mockMvc.perform( get(\"/system/vehicleType/update.page/1\") .contentType(MediaType.TEXT_HTML_VALUE) ) .andExpect(status().isOk()) .andExpect(model().attributeExists(\"vehicleType\")) .andExpect(model().attribute(\"vehicleType\", hasProperty(\"id\", equalTo(1L)))) .andExpect(view().name(PREFIX + \"update.html\")) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求跳转到更新车辆类型页面(有权限控制)成功: {}\", result); } @Test public void testCUpdatePageFailureBecauseofInvalidArgs() throws Exception { //GET 请求跳转到更新车辆类型页面(有权限控制) String result = mockMvc.perform( get(\"/system/vehicleType/update.page/\" + Long.MAX_VALUE) .contentType(MediaType.TEXT_HTML_VALUE) ) .andExpect(status().isNotFound()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.NOT_FOUND.value()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"待更新的车辆类型id[%s]不存在\", Long.MAX_VALUE)))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求跳转到更新车辆类型页面(有权限控制)失败: {}\", result); } @Test public void testCUpdatePageFailureBecauseofIllegalArgs() throws Exception { //GET 请求跳转到更新车辆类型页面(有权限控制) String result = mockMvc.perform( get(\"/system/vehicleType/update.page/\" + StringTools.getRandomString(6)) .contentType(MediaType.TEXT_HTML_VALUE) ) .andExpect(status().isInternalServerError()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.INTERNAL_SERVER_ERROR.value()))) .andExpect(jsonPath(\"$.message\", notNullValue())) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求跳转到更新车辆类型页面(有权限控制)失败: {}\", result); } @Test public void testDSyncTreeJsonSuccessWithId() throws Exception { //GET 请求同步查询车辆类型树 (查询条件: id=0L) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.parentId\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.level\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.name\", equalTo(LevelTools.ROOT_NAME))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(true))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(true))) .andExpect(jsonPath(\"$.data.children\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", everyItem(equalTo(false)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfChildren(result); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testDSyncTreeJsonSuccessWithIdAndDate() throws Exception { //日期格式化 String expectedEndDate = DateFormatUtils.format(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1),\"yyyy-MM-dd\"); //GET 请求同步查询车辆类型树 (查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04]) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"startDate\", \"2018-06-04\") .param(\"endDate\", \"2018-07-04\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.parentId\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.level\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.name\", equalTo(LevelTools.ROOT_NAME))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(true))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(true))) .andExpect(jsonPath(\"$.data.children\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.children[*].gmtCreate\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].gmtCreate\", everyItem(allOf(greaterThanOrEqualTo(\"2018-06-04\"), lessThanOrEqualTo(expectedEndDate))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfChildren(result); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testDSyncTreeJsonSuccessWithIdAndType() throws Exception { //GET 请求同步查询车辆类型树 (查询条件: id=0L,type=[1]) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"type\", VehicleTypeEnum.SEMITRAILER.getValue().toString()) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.parentId\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.level\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.name\", equalTo(LevelTools.ROOT_NAME))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(true))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(true))) .andExpect(jsonPath(\"$.data.children\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.children[*].type\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].type\", everyItem(isIn(Lists.newArrayList(VehicleTypeEnum.SEMITRAILER.getValue()))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfChildren(result); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testDSyncTreeJsonSuccessWithNullCondition() throws Exception { //GET 请求同步查询车辆类型树 (查询条件: null) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.parentId\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.level\", equalTo(LevelTools.ROOT_LEVEL))) .andExpect(jsonPath(\"$.data.name\", equalTo(LevelTools.ROOT_NAME))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(true))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(true))) .andExpect(jsonPath(\"$.data.children\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.children[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].level\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.children[*].isRoot\", everyItem(equalTo(false)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfChildren(result); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testDSyncTreeJsonFailureBecauseofNullParent() throws Exception { //GET 请求同步查询车辆类型树 (查询条件: id=Long.MAX_VALUE) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", String.valueOf(Long.MAX_VALUE)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"同步查询的父车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testDSyncTreeJsonFailureBecauseofNullChildren() throws Exception { //GET 请求同步查询车辆类型树 (查询条件: id=93L) String result = mockMvc.perform( get(\"/system/vehicleType/syncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", \"93\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"同步查询的子车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求同步查询车辆类型树(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testEAsyncTreeJsonSuccessWithId() throws Exception { //GET 请求异步查询车辆类型树 (查询条件: id=0L) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data[*].level\", empty())) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testEAsyncTreeJsonSuccessWithIdAndDate() throws Exception { //日期格式化 String expectedEndDate = DateFormatUtils.format(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1),\"yyyy-MM-dd\"); //GET 请求异步查询车辆类型树 (查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04]) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"startDate\", \"2018-06-04\") .param(\"endDate\", \"2018-07-04\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data[*].level\", empty())) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andExpect(jsonPath(\"$.data[*].gmtCreate\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].gmtCreate\", everyItem(allOf(greaterThanOrEqualTo(\"2018-06-04\"), lessThanOrEqualTo(expectedEndDate))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testEAsyncTreeJsonSuccessWithIdAndType() throws Exception { //GET 请求异步查询车辆类型树 (查询条件: id=0L,type=[1]) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"type\", VehicleTypeEnum.SEMITRAILER.getValue().toString()) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data[*].level\", empty())) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andExpect(jsonPath(\"$.data[*].type\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].type\", everyItem(isIn(Lists.newArrayList(VehicleTypeEnum.SEMITRAILER.getValue()))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testEAsyncTreeJsonSuccessWithNullCondition() throws Exception { //GET 请求异步查询车辆类型树 (查询条件: null) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data[*].level\", empty())) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testEAsyncTreeJsonFailureBecauseofNullParent() throws Exception { //GET 请求异步查询车辆类型树 (查询条件: id=Long.MAX_VALUE) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", String.valueOf(Long.MAX_VALUE)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"异步查询的父车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)失败: {}\", result); } @Test public void testEAsyncTreeJsonFailureBecauseofNullChildren() throws Exception { //GET 请求异步查询车辆类型树 (查询条件: id=93L) String result = mockMvc.perform( get(\"/system/vehicleType/asyncTree.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", \"93\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"异步查询的子车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求异步查询车辆类型树(有权限控制,并返回简单视图)失败: {}\", result); } @Test public void testFListPageJsonSuccessWithId() throws Exception { //GET 请求分页查询车辆类型 (查询条件: id=0L) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"offset\", \"0\") .param(\"limit\", \"3\") .param(\"sort\", \"num\") .param(\"order\", \"asc\") .param(\"id\", LevelTools.ROOT_LEVEL) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.total\", greaterThanOrEqualTo(0))) .andExpect(jsonPath(\"$.data.rows\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows\", hasSize(lessThanOrEqualTo(3)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].level\", everyItem(containsString(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.rows[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfRows(result); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)成功: {}\", result); } @Test public void testFListPageJsonSuccessWithIdAndDate() throws Exception { //日期格式化 String expectedEndDate = DateFormatUtils.format(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1),\"yyyy-MM-dd\"); //GET 请求分页查询车辆类型 (查询条件: id=0L,gmtCreate=[2018-06-04,2018-07-04]) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"offset\", \"0\") .param(\"limit\", \"3\") .param(\"sort\", \"num\") .param(\"order\", \"asc\") .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"startDate\", \"2018-06-04\") .param(\"endDate\", \"2018-07-04\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.total\", greaterThanOrEqualTo(0))) .andExpect(jsonPath(\"$.data.rows\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows\", hasSize(lessThanOrEqualTo(3)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].level\", everyItem(containsString(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.rows[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andExpect(jsonPath(\"$.data.rows[*].gmtCreate\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].gmtCreate\", everyItem(allOf(greaterThanOrEqualTo(\"2018-06-04\"), lessThanOrEqualTo(expectedEndDate))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfRows(result); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)成功: {}\", result); } @Test public void testFListPageJsonSuccessWithIdAndType() throws Exception { //GET 请求分页查询车辆类型 (查询条件: id=0L,type=[1]) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"offset\", \"0\") .param(\"limit\", \"3\") .param(\"sort\", \"num\") .param(\"order\", \"asc\") .param(\"id\", LevelTools.ROOT_LEVEL) .param(\"type\", VehicleTypeEnum.SEMITRAILER.getValue().toString()) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.total\", greaterThanOrEqualTo(0))) .andExpect(jsonPath(\"$.data.rows\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows\", hasSize(lessThanOrEqualTo(3)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].level\", everyItem(containsString(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.rows[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andExpect(jsonPath(\"$.data.rows[*].type\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].type\", everyItem(isIn(Lists.newArrayList(VehicleTypeEnum.SEMITRAILER.getValue()))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfRows(result); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)成功: {}\", result); } @Test public void testFListPageJsonSuccessWithNullCondition() throws Exception { //GET 请求分页查询车辆类型 (查询条件: null) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.total\", greaterThanOrEqualTo(0))) .andExpect(jsonPath(\"$.data.rows\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows\", hasSize(lessThanOrEqualTo(PageTools.DEFAULT_PAGE_SIZE)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].parentId\", everyItem(equalTo(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].level\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].level\", everyItem(containsString(LevelTools.ROOT_LEVEL)))) .andExpect(jsonPath(\"$.data.rows[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data.rows[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data.rows[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantOfRows(result); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)成功: {}\", result); } @Test public void testFListPageJsonFailureBecauseofNullParent() throws Exception { //GET 请求分页查询车辆类型 (查询条件: id=Long.MAX_VALUE) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"offset\", \"0\") .param(\"limit\", \"3\") .param(\"sort\", \"num\") .param(\"order\", \"asc\") .param(\"id\", String.valueOf(Long.MAX_VALUE)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"分页查询的父车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)失败: {}\", result); } @Test public void testFListPageJsonFailureBecauseofNullChildren() throws Exception { //GET 请求分页查询车辆类型 (查询条件: id=93L) String result = mockMvc.perform( get(\"/system/vehicleType/listPage.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"offset\", \"0\") .param(\"limit\", \"3\") .param(\"sort\", \"num\") .param(\"order\", \"asc\") .param(\"id\", \"93\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"分页查询的子车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求分页查询车辆类型(有权限控制,相当于全部视图)失败: {}\", result); } @Test public void testGListConditionJsonSuccessWithName() throws Exception { //GET 请求条件查询车辆类型 (查询条件: name=半挂车) String result = mockMvc.perform( get(\"/system/vehicleType/listCondition.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"name\", \"半挂车\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", everyItem(containsString(\"半挂车\")))) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testGListConditionJsonSuccessWithNameAndDate() throws Exception { //日期格式化 String expectedEndDate = DateFormatUtils.format(DateUtils.addDays(DateUtils.parseDate(\"2018-07-04\", \"yyyy-MM-dd\"), 1),\"yyyy-MM-dd\"); //GET 请求条件查询车辆类型 (查询条件: name=半挂车,gmtCreate=[2018-06-04,2018-07-04]) String result = mockMvc.perform( get(\"/system/vehicleType/listCondition.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"name\", \"半挂车\") .param(\"startDate\", \"2018-06-04\") .param(\"endDate\", \"2018-07-04\") ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", everyItem(containsString(\"半挂车\")))) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andExpect(jsonPath(\"$.data[*].gmtCreate\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].gmtCreate\", everyItem(allOf(greaterThanOrEqualTo(\"2018-06-04\"), lessThanOrEqualTo(expectedEndDate))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testGListConditionJsonSuccessWithNameAndType() throws Exception { //GET 请求条件查询车辆类型 (查询条件: name=半挂车,type=[1]) String result = mockMvc.perform( get(\"/system/vehicleType/listCondition.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"name\", \"半挂车\") .param(\"type\", VehicleTypeEnum.SEMITRAILER.getValue().toString()) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].name\", everyItem(containsString(\"半挂车\")))) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andExpect(jsonPath(\"$.data[*].type\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].type\", everyItem(isIn(Lists.newArrayList(VehicleTypeEnum.SEMITRAILER.getValue()))))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testGListConditionJsonSuccessWithNullCondition() throws Exception { //GET 请求条件查询车辆类型 (查询条件: null) String result = mockMvc.perform( get(\"/system/vehicleType/listCondition.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].state\", everyItem(not(BaseStateEnum.DELETED.getValue())))) .andExpect(jsonPath(\"$.data[*].isRoot\", hasSize(greaterThanOrEqualTo(0)))) .andExpect(jsonPath(\"$.data[*].isRoot\", everyItem(equalTo(false)))) .andExpect(jsonPath(\"$.data[*].children\", everyItem(emptyCollectionOf(SysVehicleTypeDto.class)))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForList(result); log.info(\"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)成功: {}\", result); } @Test public void testGRoleListConditionJsonFailureBecauseofNullResult() throws Exception { //GET 请求条件查询车辆类型 (查询条件: id=Long.MAX_VALUE) String result = mockMvc.perform( get(\"/system/vehicleType/listCondition.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .param(\"id\", String.valueOf(Long.MAX_VALUE)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INEXISTENCE.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"条件查询的车辆类型不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"GET 请求条件查询车辆类型(有权限控制,并返回简单视图)失败: {}\", result); } @Test public void testHAddJsonSuccessWithFullArgs() throws Exception { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认新增完整参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleTypeParam.setRemark(\"新增成功:完整参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); sysVehicleTypeParam.setOwnerEnterpriseId(enterpriseId); sysVehicleTypeParam.setOwnerEnterpriseName(enterpriseName); sysVehicleTypeParam.setOwnerUserId(userId); sysVehicleTypeParam.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleTypeParam.setTenantId(tenantId); } sysVehicleTypeParam.setTenantType(tenantType); sysVehicleTypeParam.setTenantName(tenantName); //POST 请求新增车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( post(\"/system/vehicleType/add.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", notNullValue())) .andExpect(jsonPath(\"$.data.parentId\", equalTo(sysVehicleTypeParam.getParentId().toString()))) .andExpect(jsonPath(\"$.data.level\", containsString(sysVehicleTypeParam.getParentId().toString()))) .andExpect(jsonPath(\"$.data.num\", equalTo(sysVehicleTypeParam.getNum()))) .andExpect(jsonPath(\"$.data.type\", equalTo(sysVehicleTypeParam.getType()))) .andExpect(jsonPath(\"$.data.name\", equalTo(sysVehicleTypeParam.getName()))) .andExpect(jsonPath(\"$.data.remark\", equalTo(sysVehicleTypeParam.getRemark()))) .andExpect(jsonPath(\"$.data.state\", equalTo(sysVehicleTypeParam.getState()))) .andExpect(jsonPath(\"$.data.ownerEnterpriseId\", equalTo(sysVehicleTypeParam.getOwnerEnterpriseId().toString()))) .andExpect(jsonPath(\"$.data.ownerEnterpriseName\", equalTo(sysVehicleTypeParam.getOwnerEnterpriseName()))) .andExpect(jsonPath(\"$.data.ownerUserId\", equalTo(sysVehicleTypeParam.getOwnerUserId().toString()))) .andExpect(jsonPath(\"$.data.ownerUserName\", equalTo(sysVehicleTypeParam.getOwnerUserName()))) .andExpect(jsonPath(\"$.data.createEnterpriseId\", equalTo(currentUser.getCreateEnterpriseId().toString()))) .andExpect(jsonPath(\"$.data.createEnterpriseName\", equalTo(currentUser.getCreateEnterpriseName()))) .andExpect(jsonPath(\"$.data.modifiedEnterpriseId\", equalTo(currentUser.getModifiedEnterpriseId().toString()))) .andExpect(jsonPath(\"$.data.modifiedEnterpriseName\", equalTo(currentUser.getModifiedEnterpriseName()))) .andExpect(jsonPath(\"$.data.createUserId\", equalTo(currentUser.getCreateUserId().toString()))) .andExpect(jsonPath(\"$.data.createUserName\", equalTo(currentUser.getCreateUserName()))) .andExpect(jsonPath(\"$.data.modifiedUserId\", equalTo(currentUser.getModifiedUserId().toString()))) .andExpect(jsonPath(\"$.data.modifiedUserName\", equalTo(currentUser.getModifiedUserName()))) .andExpect(jsonPath(\"$.data.tenantId\", equalTo(sysVehicleTypeParam.getTenantId().toString()))) .andExpect(jsonPath(\"$.data.tenantType\", equalTo(sysVehicleTypeParam.getTenantType()))) .andExpect(jsonPath(\"$.data.tenantName\", equalTo(sysVehicleTypeParam.getTenantName()))) .andExpect(jsonPath(\"$.data.gmtCreate\", notNullValue())) .andExpect(jsonPath(\"$.data.gmtModified\", notNullValue())) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(false))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(false))) .andExpect(jsonPath(\"$.data.children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"POST 请求新增车辆类型(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testHAddJsonSuccessWithRequiredArgs() throws Exception { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); Integer source = ShiroTools.isAdmin() ? RoleSourceEnum.SYSTEM_ROLE.getValue() : RoleSourceEnum.NORMAL_ROLE.getValue(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认新增必须参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增成功\") .build(); sysVehicleTypeParam.setRemark(\"新增成功:必须参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); //POST 请求新增车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( post(\"/system/vehicleType/add.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", notNullValue())) .andExpect(jsonPath(\"$.data.parentId\", equalTo(sysVehicleTypeParam.getParentId().toString()))) .andExpect(jsonPath(\"$.data.level\", containsString(sysVehicleTypeParam.getParentId().toString()))) .andExpect(jsonPath(\"$.data.num\", equalTo(sysVehicleTypeParam.getNum()))) .andExpect(jsonPath(\"$.data.type\", equalTo(sysVehicleTypeParam.getType()))) .andExpect(jsonPath(\"$.data.name\", equalTo(sysVehicleTypeParam.getName()))) .andExpect(jsonPath(\"$.data.remark\", equalTo(sysVehicleTypeParam.getRemark()))) .andExpect(jsonPath(\"$.data.state\", equalTo(sysVehicleTypeParam.getState()))) .andExpect(jsonPath(\"$.data.ownerEnterpriseId\", equalTo(enterpriseId.toString()))) .andExpect(jsonPath(\"$.data.ownerEnterpriseName\", equalTo(enterpriseName))) .andExpect(jsonPath(\"$.data.ownerUserId\", equalTo(userId.toString()))) .andExpect(jsonPath(\"$.data.ownerUserName\", equalTo(userName))) .andExpect(jsonPath(\"$.data.createEnterpriseId\", equalTo(currentUser.getCreateEnterpriseId().toString()))) .andExpect(jsonPath(\"$.data.createEnterpriseName\", equalTo(currentUser.getCreateEnterpriseName()))) .andExpect(jsonPath(\"$.data.modifiedEnterpriseId\", equalTo(currentUser.getModifiedEnterpriseId().toString()))) .andExpect(jsonPath(\"$.data.modifiedEnterpriseName\", equalTo(currentUser.getModifiedEnterpriseName()))) .andExpect(jsonPath(\"$.data.createUserId\", equalTo(currentUser.getCreateUserId().toString()))) .andExpect(jsonPath(\"$.data.createUserName\", equalTo(currentUser.getCreateUserName()))) .andExpect(jsonPath(\"$.data.modifiedUserId\", equalTo(currentUser.getModifiedUserId().toString()))) .andExpect(jsonPath(\"$.data.modifiedUserName\", equalTo(currentUser.getModifiedUserName()))) .andExpect(jsonPath(\"$.data.tenantId\", equalTo(tenantId.toString()))) .andExpect(jsonPath(\"$.data.tenantType\", equalTo(tenantType))) .andExpect(jsonPath(\"$.data.tenantName\", equalTo(tenantName))) .andExpect(jsonPath(\"$.data.gmtCreate\", notNullValue())) .andExpect(jsonPath(\"$.data.gmtModified\", notNullValue())) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(false))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(false))) .andExpect(jsonPath(\"$.data.children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"POST 请求新增车辆类型(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testHAddJsonFailureBecauseofInvalidArgs() throws Exception { //默认新增无效参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() // .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"新增失败\") .build(); sysVehicleTypeParam.setRemark(\"新增失败:无效参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); //POST 请求新增车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( post(\"/system/vehicleType/add.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INVALID.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(\"parentId=上级车辆类型id不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"POST 请求新增车辆类型(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testHAddJsonFailureBecauseofIllegalArgs() throws Exception { //默认新增非法参数 SysVehicleTypeParam sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"半挂车\") .build(); sysVehicleTypeParam.setRemark(\"新增失败:非法参数\"); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); //POST 请求新增车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( post(\"/system/vehicleType/add.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isBadRequest()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.BAD_REQUEST.value()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"同一层级下的车辆类型[%s]已存在\", \"半挂车\")))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"POST 请求新增车辆类型(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testIUpdateJsonSuccessWithAlone() throws Exception { //日期时间格式化 String expectedModified = DateFormatUtils.format(DateUtils.addSeconds(new Date(), -10),\"yyyy-MM-dd HH:mm:ss\"); //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新成功\"); sysVehicleTypeParam.setRemark(\"更新成功:单独更新\"); //PUT 请求更新车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( MockMvcRequestBuilders.put(\"/system/vehicleType/update.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(sysVehicleTypeParam.getId().toString()))) .andExpect(jsonPath(\"$.data.num\", equalTo(sysVehicleTypeParam.getNum()))) .andExpect(jsonPath(\"$.data.name\", equalTo(sysVehicleTypeParam.getName()))) .andExpect(jsonPath(\"$.data.remark\", equalTo(sysVehicleTypeParam.getRemark()))) .andExpect(jsonPath(\"$.data.gmtModified\", greaterThanOrEqualTo(expectedModified))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(prepare.getIsRoot()))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(prepare.getIsParent()))) .andExpect(jsonPath(\"$.data.children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForOne(result); log.info(\"PUT 请求更新车辆类型(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testIUpdateJsonSuccessWithDescendant() throws Exception { //日期时间格式化 String expectedModified = DateFormatUtils.format(DateUtils.addSeconds(new Date(), -10),\"yyyy-MM-dd HH:mm:ss\"); //测试数据 SysVehicleTypeDto parentDto = prepareTestData(null); SysVehicleTypeParam childParam = SysVehicleTypeParam.builder() .parentId(parentDto.getId()) .num(1) .type(parentDto.getType()) .name(parentDto.getName() + \":子车辆类型\") .build(); childParam.setRemark(parentDto.getRemark() + \":子车辆类型\"); childParam.setState(parentDto.getState()); prepareTestData(childParam); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(parentDto)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新成功\"); sysVehicleTypeParam.setRemark(\"更新成功:后代更新\"); //PUT 请求更新车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( put(\"/system/vehicleType/update.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andExpect(jsonPath(\"$.data.id\", equalTo(sysVehicleTypeParam.getId().toString()))) .andExpect(jsonPath(\"$.data.num\", equalTo(sysVehicleTypeParam.getNum()))) .andExpect(jsonPath(\"$.data.name\", equalTo(sysVehicleTypeParam.getName()))) .andExpect(jsonPath(\"$.data.remark\", equalTo(sysVehicleTypeParam.getRemark()))) .andExpect(jsonPath(\"$.data.gmtModified\", greaterThanOrEqualTo(expectedModified))) .andExpect(jsonPath(\"$.data.isRoot\", equalTo(false))) .andExpect(jsonPath(\"$.data.isParent\", equalTo(true))) .andExpect(jsonPath(\"$.data.children\", emptyCollectionOf(SysVehicleTypeDto.class))) .andDo(print()) .andReturn().getResponse().getContentAsString(); //验证租户信息 validateTenantForOne(result); log.info(\"PUT 请求更新车辆类型(有权限控制,并返回详细视图)成功: {}\", result); } @Test public void testIUpdateJsonFailureBecauseofInvalidArgs() throws Exception { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新失败\"); sysVehicleTypeParam.setParentId(null); sysVehicleTypeParam.setRemark(\"更新失败:无效参数\"); //PUT 请求更新车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( put(\"/system/vehicleType/update.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\").value(ResultEnum.INVALID.getCode())) .andExpect(jsonPath(\"$.message\", equalTo(\"parentId=上级车辆类型id不存在\"))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"PUT 请求更新车辆类型(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testIUpdateJsonFailureBecauseofIllegalArgs() throws Exception { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeDto repeat = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(repeat.getName()); sysVehicleTypeParam.setRemark(\"更新失败:非法参数\"); //PUT 请求更新车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( put(\"/system/vehicleType/update.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isBadRequest()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.BAD_REQUEST.value()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"同一层级下的车辆类型[%s]已存在\", sysVehicleTypeParam.getName())))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"PUT 请求更新车辆类型(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testIUpdateJsonFailureBecauseofNullIdArgs() throws Exception { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); SysVehicleTypeParam sysVehicleTypeParam = Preconditions.checkNotNull(SysVehicleTypeDto.dtoAdaptParam(prepare)); sysVehicleTypeParam.setNum(1); sysVehicleTypeParam.setName(\"更新失败\"); sysVehicleTypeParam.setId(null); sysVehicleTypeParam.setRemark(\"更新失败:主键缺失\"); //PUT 请求更新车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( put(\"/system/vehicleType/update.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.INVALID.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"待更新的车辆类型id[%s]不存在\", sysVehicleTypeParam.getName())))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"PUT 请求更新车辆类型(有权限控制,并返回详细视图)失败: {}\", result); } @Test public void testJDeleteJsonSuccess() throws Exception { //测试数据 SysVehicleTypeDto prepare = prepareTestData(null); //DELETE 请求删除车辆类型(有权限控制) String result = mockMvc.perform( delete(\"/system/vehicleType/delete.json/\" + prepare.getId()) .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"DELETE 请求删除车辆类型(有权限控制)成功: {}\", result); } @Test public void testJDeleteJsonFailureBecauseofInvalidlArgs() throws Exception { //DELETE 请求删除车辆类型(有权限控制) String result = mockMvc.perform( delete(\"/system/vehicleType/delete.json/\" + Long.MAX_VALUE) .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isNotFound()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.NOT_FOUND.value()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"待删除的车辆类型id[%s]不存在\", Long.MAX_VALUE)))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"DELETE 请求删除车辆类型(有权限控制)失败: {}\", result); } @Test public void testJDeleteJsonFailureBecauseofIllegalArgs() throws Exception { //测试数据 SysVehicleTypeDto parentDto = prepareTestData(null); SysVehicleTypeParam childParam = SysVehicleTypeParam.builder() .parentId(parentDto.getId()) .num(1) .type(parentDto.getType()) .name(parentDto.getName() + \":子车辆类型\") .build(); childParam.setRemark(parentDto.getRemark() + \":子车辆类型\"); childParam.setState(parentDto.getState()); prepareTestData(childParam); //DELETE 请求删除车辆类型(有权限控制) String result = mockMvc.perform( delete(\"/system/vehicleType/delete.json/\" + parentDto.getId()) .contentType(MediaType.APPLICATION_JSON_UTF8) ) .andExpect(status().isBadRequest()) .andExpect(jsonPath(\"$.code\", equalTo(HttpStatus.BAD_REQUEST.value()))) .andExpect(jsonPath(\"$.message\", equalTo(String.format(\"待删除的车辆类型[%s]存在子车辆类型\", parentDto.getName())))) .andExpect(jsonPath(\"$.data\", nullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"DELETE 请求删除车辆类型(有权限控制)失败: {}\", result); } /** * 准备测试数据 * * @param sysVehicleTypeParam 新增单个车辆类型 param * @return 新增单个车辆类型 dto * @throws Exception 新增失败时抛出异常 */ private SysVehicleTypeDto prepareTestData(SysVehicleTypeParam sysVehicleTypeParam) throws Exception { //测试数据 if (Objects.isNull(sysVehicleTypeParam)) { //当前登录用户信息 SysUserDto currentUser = ShiroTools.getShiroUser(); Preconditions.checkNotNull(currentUser, \"当前登录用户信息不存在\"); Long enterpriseId = currentUser.getOwnerEnterpriseId(); String enterpriseName = currentUser.getOwnerEnterpriseName(); Long userId = currentUser.getOwnerUserId(); String userName = currentUser.getOwnerUserName(); Long tenantId = currentUser.getTenantId(); Integer tenantType = currentUser.getTenantType(); String tenantName = currentUser.getTenantName(); log.info(\"当前登录用户: {}\", JacksonTools.object2Json(currentUser)); //默认测试数据 sysVehicleTypeParam = SysVehicleTypeParam.builder() .parentId(Long.valueOf(LevelTools.ROOT_LEVEL)) .num(Integer.MAX_VALUE) .type(VehicleTypeEnum.SEMITRAILER.getValue()) .name(\"测试数据:\" + StringTools.getRandomString(6)) .build(); sysVehicleTypeParam.setRemark(\"测试数据:\" + StringTools.getRandomString(6)); sysVehicleTypeParam.setState(BaseStateEnum.OK.getValue()); sysVehicleTypeParam.setOwnerEnterpriseId(enterpriseId); sysVehicleTypeParam.setOwnerEnterpriseName(enterpriseName); sysVehicleTypeParam.setOwnerUserId(userId); sysVehicleTypeParam.setOwnerUserName(userName); //租户过滤可能会重复添加:取决于是否存在租户约束 if (ShiroTools.isAdmin()) { sysVehicleTypeParam.setTenantId(tenantId); } sysVehicleTypeParam.setTenantType(tenantType); sysVehicleTypeParam.setTenantName(tenantName); } //POST 请求新增车辆类型(有权限控制,并返回详细视图) String result = mockMvc.perform( post(\"/system/vehicleType/add.json\") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(JacksonTools.object2Json(sysVehicleTypeParam)) ) .andExpect(status().isOk()) .andExpect(jsonPath(\"$.code\", equalTo(ResultEnum.SUCCESS.getCode()))) .andExpect(jsonPath(\"$.message\", equalTo(ResultEnum.SUCCESS.getMessage()))) .andExpect(jsonPath(\"$.data\", notNullValue())) .andDo(print()) .andReturn().getResponse().getContentAsString(); log.info(\"POST 请求新增车辆类型(有权限控制,并返回详细视图)成功: {}\", result); return JacksonTools.json2Object(result, new TypeReference>() { }).getData(); } } Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 09:55:18 "},"docs/practice/normal/indexPage.html":{"url":"docs/practice/normal/indexPage.html","title":"indexPage","keywords":"","body":"indexPage 设计思想: 菜单页面作为功能的入口,因此采取完整 html 格式编写,页面渲染部分用 beetl 模板引擎绑定,如果您想了解更多语法,请访问beetl 在线文档查看; 基本规则: beetl 模板除了标准的 html 标签外,还支持自定义标签 ,例如 ; 如果需要处理功能权限,可以使用 进行条件渲染; 找到 role 角色目录,并复制重命名为 vehicleType,同时打开两个窗口,方便编辑; 根据实际情况,编写 vehicleType 目录下面的 index.html 页面; 选中 车辆类型管理 菜单,右键 新标签页 打开,方便下一步 js 调试; 最终效果如下; 删除测试,默认 无子节点 允许删除,有子节点 禁用删除; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:46:27 "},"docs/practice/normal/indexJs.html":{"url":"docs/practice/normal/indexJs.html","title":"indexJs","keywords":"","body":"indexJs 设计思想: 考虑到后续项目可能会采用 vuejs 框架,前后端分离,因此当前 js 层面采用类vuejs语法设计模式; 基本规则如下: data 数据层,进行数据绑定,存放公共变量; method 方法层,绑定公共方法,方便统一管理; plugins 插件层,第三方插件配置项; 找到 role 目录下面的 index.js ,和 vehicleType 目录下面的 index.js,打开左右两个窗口,同时对比查看; 根据实际情况,编写 vehicleType 目录下面的 index.js ; 调试完成,index.html 数据请求正常显示,效果如图; 删除测试,默认 无子节点 允许删除,有子节点 禁用删除; index.js /** * 首页实例对象 * * @author snowdreams1006 * @date 2018-08-07 */ var indexInstance = { data: { layerIndex: -1 }, method: { /** * 初始化分页表格显示字段 */ initColumns: function () { var columns = [ { radio: true }, { title: \"序号\", titleTooltip: \"序号\", visible: true, showSelectTitle: true, formatter: function (value, row, index, field) { try { var bsTableInstance = indexInstance.plugins.bootstrapTable.bsTableInstance; var pageSize = bsTableInstance.bootstrapTable('getOptions').pageSize; var pageNumber = bsTableInstance.bootstrapTable('getOptions').pageNumber; return pageSize * (pageNumber - 1) + index + 1; } catch (error) { Feng.log(error); Feng.info(\"分页表格尚未实例化,无法刷新!\"); return index + 1; } } }, { field: \"id\", title: \"id\", titleTooltip: \"车辆类型id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"name\", title: \"名称\", titleTooltip: \"车辆类型名称\", sortable: true, visible: true, showSelectTitle: true }, { field: \"num\", title: \"排序\", titleTooltip: \"排序\", sortable: true, visible: true, showSelectTitle: true }, { field: \"type\", title: \"类型\", titleTooltip: \"类型:1表示牵引车,2表示半挂车,3表示全挂车\", sortable: true, visible: true, showSelectTitle: true, formatter: function (value, row, index, field) { if (value == 1) { return ''; } if (value == 2) { return ''; } return ''; } }, { field: \"remark\", title: \"备注\", titleTooltip: \"车辆类型备注\", sortable: true, visible: false, showSelectTitle: true }, { field: \"state\", title: \"状态\", titleTooltip: \"状态:1表示启用中,2表示已冻结,3表示已删除\", sortable: true, visible: true, showSelectTitle: true, formatter: function (value, row, index, field) { if (value == 1) { return ''; } if (value == 2) { return ''; } if (value == 3) { return ''; } return ''; } }, { field: \"ownerEnterpriseId\", title: \"所有者企业id\", titleTooltip: \"所有者企业id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"ownerEnterpriseName\", title: \"所有者企业名称\", titleTooltip: \"所有者企业名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"ownerUserId\", title: \"所有者用户id\", titleTooltip: \"所有者用户id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"ownerUserName\", title: \"所有者用户名称\", titleTooltip: \"所有者用户名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"createEnterpriseId\", title: \"创建企业id\", titleTooltip: \"创建企业id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"createEnterpriseName\", title: \"创建企业名称\", titleTooltip: \"创建企业名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"modifiedEnterpriseId\", title: \"更新企业id\", titleTooltip: \"更新企业id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"modifiedEnterpriseName\", title: \"更新企业名称\", titleTooltip: \"更新企业名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"createUserId\", title: \"创建用户id\", titleTooltip: \"创建用户id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"createUserName\", title: \"创建用户名称\", titleTooltip: \"创建用户名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"modifiedUserId\", title: \"更新用户id\", titleTooltip: \"更新用户id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"modifiedUserName\", title: \"更新用户名称\", titleTooltip: \"更新用户名称\", sortable: false, visible: false, showSelectTitle: true }, { field: \"tenantId\", title: \"租户id\", titleTooltip: \"租户id\", sortable: true, visible: false, showSelectTitle: true }, { field: \"tenantType\", title: \"租户类型\", titleTooltip: \"租户类型,1表示企业租户,2表示个人租户\", sortable: false, visible: false, showSelectTitle: true, formatter: function (value, row, index, field) { if (value == 1) { return ''; } if (value == 2) { return ''; } return ''; } }, { field: \"tenantName\", title: \"租户名称\", titleTooltip: \"租户名称\", sortable: true, visible: false, showSelectTitle: true }, { field: \"gmtCreate\", title: \"创建时间\", titleTooltip: \"创建时间\", sortable: true, visible: false, showSelectTitle: true }, { field: \"gmtModified\", title: \"更新时间\", titleTooltip: \"更新时间\", sortable: true, visible: true, showSelectTitle: true } ]; return columns; }, /** * 初始化 */ init: function () { //初始化异步树 var ztreeSetting = {}; ztreeSetting = $.extend(true, ztreeSetting, Default.ztree.setting, indexInstance.plugins.ztree.setting); indexInstance.plugins.ztree.ztreeInstance = $.fn.zTree.init($(\"#asyncTree\"), ztreeSetting); //初始化分页表格显示字段 indexInstance.plugins.bootstrapTable.setting.columns = indexInstance.method.initColumns(); //初始化分页表格 var bootstrapTableSetting = {}; bootstrapTableSetting = $.extend(true, bootstrapTableSetting, Default.bootstrapTable.setting, indexInstance.plugins.bootstrapTable.setting); indexInstance.plugins.bootstrapTable.bsTableInstance = $('#vehicleTypeTable').bootstrapTable(bootstrapTableSetting); //初始化搜索建议 var bsSuggestSetting = {}; bsSuggestSetting = $.extend(true, bsSuggestSetting, Default.bsSuggest.setting, indexInstance.plugins.bsSuggest.setting); $('#nameSuggest').bsSuggest(bsSuggestSetting); //初始化日期范围 var datepickerSetting = {}; datepickerSetting = $.extend(true, datepickerSetting, Default.datepicker.setting, indexInstance.plugins.datepicker.setting); $('.input-daterange').datepicker(datepickerSetting); }, /** * 获取ztree选中记录 */ getZtreeSelectedNodes: function () { var ztreeSelectNodes = []; try { //获取 zt 已选中的节点列表 var ztreeInstance = indexInstance.plugins.ztree.ztreeInstance; ztreeSelectNodes = ztreeInstance.getSelectedNodes(); return ztreeSelectNodes; } catch (error) { Feng.log(error); Feng.info(\"异步树尚未实例化,无法获取数据!\"); return ztreeSelectNodes; } }, /** * 获取bsTable选中记录 */ getBsTableSelections: function () { var bsTableSelections = []; try { var bsTableInstance = indexInstance.plugins.bootstrapTable.bsTableInstance; bsTableSelections = bsTableInstance.bootstrapTable('getSelections'); return bsTableSelections; } catch (error) { Feng.log(error); Feng.info(\"分页表格尚未实例化,无法获取数据!\"); return bsTableSelections; } }, /** * 从 bs 和 zt 已选列表中获取唯一 id */ getSingleSelectedId: function () { var selectedId = null; //获取 bs 表格选中记录 var bsTableSelections = indexInstance.method.getBsTableSelections(); // 获取 zt 树选中记录 var ztreeSelectNodes = indexInstance.method.getZtreeSelectedNodes(); //优先 bs 表格记录,其次 zt 树记录 if (bsTableSelections.length == 0 && ztreeSelectNodes.length == 1) { selectedId = ztreeSelectNodes[0].id; } else if (bsTableSelections.length == 1) { selectedId = bsTableSelections[0].id; } return selectedId; }, /** * GET 请求跳转到新增车辆类型页面 */ addPage: function () { var index = Feng.openWindow({ id: \"vehicleType_add.page\", title: \"新增车辆类型\", content: Feng.ctxPath + \"/system/vehicleType/add.page\" }); indexInstance.data.layerIndex = index; }, /** * GET 请求跳转到更新车辆类型页面 */ updatePage: function () { var selectedId = indexInstance.method.getSingleSelectedId(); if (!selectedId) { return Feng.info(\"请先选中某一条记录再操作~\"); } var index = Feng.openWindow({ id: \"vehicleType_update.page\", title: \"更新车辆类型\", content: Feng.ctxPath + \"/system/vehicleType/update.page/\" + selectedId }); indexInstance.data.layerIndex = index; }, /** * DELETE 请求删除车辆类型 */ deleteJson: function () { var selectedId = indexInstance.method.getSingleSelectedId(); if (!selectedId) { return Feng.info(\"请先选中某一条记录再操作~\"); } Feng.confirm(\"是否刪除选中数据?\", { title: \"删除确认\" }, function (index, layero) { $.ajax({ type: \"DELETE\", url: Feng.ctxPath + \"/system/vehicleType/delete.json/\" + selectedId, contentType: \"application/json\", dataType: \"json\", success: function (data, textStatus) { indexInstance.method.refresh(); Feng.success(\"删除成功!\"); }, error: function (XMLHttpRequest, textStatus, errorThrown) { Feng.error(XMLHttpRequest.responseJSON.message); } }); }); }, /** * 刷新 ztree */ refreshZtree: function () { try { var ztreeInstance = indexInstance.plugins.ztree.ztreeInstance; //重置初始化节点 ztreeInstance.reAsyncChildNodes(null, \"refresh\", true); } catch (error) { Feng.log(error); Feng.info(\"异步树尚未实例化,无法刷新!\"); location.reload(true); } }, /** * 刷新 BsTable */ refreshBsTable: function () { try { var bsTableInstance = indexInstance.plugins.bootstrapTable.bsTableInstance; //重置默认分页信息 bsTableInstance.bootstrapTable('refreshOptions', { pageNumber: 1, pageSize: 10 }); //重置视图高度 bsTableInstance.bootstrapTable('resetView', { height: $(window).height() }); } catch (error) { Feng.log(error); Feng.info(\"分页表格尚未实例化,无法刷新!\"); location.reload(true); } }, /** * 刷新 */ refresh: function () { try { //刷新zTree indexInstance.method.refreshZtree(); //刷新bsTable indexInstance.method.refreshBsTable(); } catch (error) { Feng.log(error); Feng.info(\"异步树或分页表格尚未实例化,无法刷新!\"); location.reload(true); } }, /** * 重置 */ reset: function () { //清空表单 $(\"#queryForm\").clearForm(true); //刷新 indexInstance.method.refresh(); }, /** * 搜索 */ search: function () { try { //结合自定义条件刷新表格 var bsTableInstance = indexInstance.plugins.bootstrapTable.bsTableInstance; var searchParamObj = $(\"#queryForm\").serializeObject(); var queryData = { query: searchParamObj }; bsTableInstance.bootstrapTable('refresh', queryData); } catch (error) { Feng.log(error); Feng.info(\"分页表格尚未实例化,无法刷新!\"); location.reload(true); } } }, plugins: { ztree: { setting: { async: { url: Feng.ctxPath + \"/system/vehicleType/asyncTree.json\", autoParam: function (treeId, treeNode) { if (!treeNode) { return []; } else { return [\"id\"]; } } }, callback: { onClick: function (event, treeId, treeNode, clickFlag) { //设置当前选中父节点 $(\"#id\").val(treeNode.id); indexInstance.method.search(); } } }, ztreeInstance: null }, bootstrapTable: { setting: { url: Feng.ctxPath + '/system/vehicleType/listPage.json', queryParams: function (params) { var searchParamObj = $(\"#queryForm\").serializeObject(); searchParamObj = $.extend(searchParamObj, params); return searchParamObj; }, sortName: \"num\", sortOrder: \"asc\", idField: \"id\", uniqueId: \"id\", toolbar: \"#vehicleTypeTableToolbar\", columns: [] }, bsTableInstance: null }, bsSuggest: { setting: { url: Feng.ctxPath + \"/system/vehicleType/listCondition.json\", idField: \"id\", keyField: \"name\", showHeader: true, effectiveFields: [\"name\"], effectiveFieldsAlias: { name: \"车辆类型名称\" }, searchFields: [\"name\"], fnProcessData: function (responseData) { if (!responseData || responseData.code != 0) { return false; } var i, len, data = { value: [] }; len = responseData.data.length; for (i = 0; i Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:48:35 "},"docs/practice/normal/updatePage.html":{"url":"docs/practice/normal/updatePage.html","title":"updatePage","keywords":"","body":"updatePage 设计思想: 更新页面作为菜单页面功能的一部分,采用内页窗口模式弹出,但本质上是独立的页面,因此采用尽量简单方式开发更新页面; 找到 role 目录下面的 update.html ,和 vehicleType 目录下面的 update.html,打开左右两个窗口,同时对比查看; 根据实际情况,编写 vehicleType 目录下面的 update.html ; 还未修改 update.js ,因此 update.html 页面请求可能不正确显示,效果如图; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:18:37 "},"docs/practice/normal/updateJs.html":{"url":"docs/practice/normal/updateJs.html","title":"updateJs","keywords":"","body":"updateJs 找到 role 目录下面的 update.js ,和 vehicleType 目录下面的 update.js,打开左右两个窗口,同时对比查看; 根据实际情况,编写 vehicleType 目录下面的 update.js ; 调试完成, update.html 页面正确显示,效果如图; update.js /** * 更新实例对象 * * @author snowdreams1006 * @date 2018-08-07 */ var updateInstance = { data: { isAdmin: false }, method: { /** * 初始化更新同步树 */ initUpdateSyncTree: function (onSuccess) { //同步获取必须传入回调函数 if (!onSuccess || !$.isFunction(onSuccess)) { return Feng.error(\"请传入成功回调函数\"); } //同步获取更新同步树 $.ajax({ url: Feng.ctxPath + \"/system/vehicleType/syncTree.json\", contentType: \"application/json\", dataType: \"json\", type: \"GET\", success: function (responseData, textStatus) { if (responseData.code == 0) { var root = responseData.data; onSuccess(root); } else { Feng.info(responseData.message); } }, error: function (XMLHttpRequest, textStatus, errorThrown) { Feng.error(XMLHttpRequest.responseJSON.message); } }); }, /** * 显示更新同步树 */ showUpdateSyncTree: function () { var parentIdNameDom = $(\"#parentIdName\"); $(\"#updateMenuContent\").css({ left: parentIdNameDom.offset().left + \"px\", top: parentIdNameDom.offset().top + parentIdNameDom.outerHeight() + \"px\" }).slideDown(\"fast\"); $(\"body\").bind(\"mousedown\", updateInstance.method.onBodyDown); }, /** * body键盘按下隐藏更新同步树 */ onBodyDown: function (event) { var showingFlag = (event.target.id == \"menuBtn\" || event.target.id == \"parentIdName\" || event.target.id == \"updateMenuContent\" || $(event.target).parents(\"#updateMenuContent\").length > 0); if (!showingFlag) { updateInstance.method.hideUpdateSyncTree(); } }, /** * 隐藏更新同步树 */ hideUpdateSyncTree: function (event) { $(\"#updateMenuContent\").fadeOut(\"fast\"); $(\"body\").unbind(\"mousedown\", updateInstance.method.onBodyDown); }, /** * 初始化 */ init: function () { //获取用户基本信息 updateInstance.data.isAdmin = JSON.parse($(\"#isAdmin\").val()) || false; //初始化类型 var type = $(\"#type\").data(\"radio-value\"); type && $('input:radio[name=\"type\"][value=\"' + type + '\"]').prop(\"checked\", \"checked\"); //初始化状态 var state = $(\"#state\").data(\"radio-value\"); state && $('input:radio[name=\"state\"][value=\"' + state + '\"]').prop(\"checked\", \"checked\"); //初始化隐藏状态的更新同步树 updateInstance.method.initUpdateSyncTree(function (root) { //初始化 ztree 设置 var ztreeSetting = {}; ztreeSetting = $.extend(true, ztreeSetting, Default.ztree.setting, updateInstance.plugins.ztree.setting); //初始化更新同步树 updateInstance.plugins.ztree.ztreeInstance = $.fn.zTree.init($(\"#updateSyncTree\"), ztreeSetting, root); //初始化选中上级实例 var ztreeInstance = updateInstance.plugins.ztree.ztreeInstance; var parentIdNode = ztreeInstance.getNodeByParam(\"id\", $(\"#parentId\").val(), null); if (parentIdNode) { ztreeInstance.checkNode(parentIdNode, true, true, true); } }); //初始化更新表单校验 var validatorSetting = {}; validatorSetting = $.extend(true, validatorSetting, updateInstance.plugins.validator.setting); updateInstance.plugins.validator.validatorInstance = $(\"#updateForm\").validate(validatorSetting); //初始化有\"管理员\"车辆类型的专属功能 var isAdmin = updateInstance.data.isAdmin; if (isAdmin) { //初始化管理员所有者企业搜索 var ownerEnterpriseNameSetting = $.extend(true, {}, Default.bsSuggest.setting, updateInstance.plugins.bsSuggest.ownerEnterpriseNameSetting); $(\"#ownerEnterpriseName\").bsSuggest(ownerEnterpriseNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充所有者企业 id var ownerEnterpriseId = selectedRawData.id; $(\"#ownerEnterpriseId\").val(ownerEnterpriseId); }); //初始化所有者企业校验 $(\"#ownerEnterpriseName\").rules(\"remove\"); $(\"#ownerEnterpriseName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 所有者企业名称不能为空\", minlength: \" 所有者企业名称至少1个字符\", maxlength: \" 所有者企业名称至多50个字符\" } }); //初始化管理员所有者用户搜索 var ownerUserNameSetting = $.extend(true, {}, Default.bsSuggest.setting, updateInstance.plugins.bsSuggest.ownerUserNameSetting); $(\"#ownerUserName\").bsSuggest(ownerUserNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充所有者用户 id var ownerUserId = selectedRawData.id; $(\"#ownerUserId\").val(ownerUserId); }); //初始化所有者用户校验 $(\"#ownerUserName\").rules(\"remove\"); $(\"#ownerUserName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 所有者用户名称不能为空\", minlength: \" 所有者用户名称至少1个字符\", maxlength: \" 所有者用户名称至多50个字符\" } }); //初始化租户类型并监听onchange事件 var tenantType = $(\"#tenantType\").data(\"radio-value\"); $('input:radio[name=\"tenantType\"]').change(function () { var selectType = parseInt($(this).val()); switch (selectType) { case 1: //更新管理员租户(企业租户)搜索 $(\"#tenantName\").bsSuggest(\"destroy\"); $(\"#tenantName\").bsSuggest(ownerEnterpriseNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充租户 id var tenantId = selectedRawData.id; $(\"#tenantId\").val(tenantId); }); break; case 2: //更新管理员租户(个人租户)搜索 $(\"#tenantName\").bsSuggest(\"destroy\"); $(\"#tenantName\").bsSuggest(ownerUserNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充租户 id var tenantId = selectedRawData.id; $(\"#tenantId\").val(tenantId); }); break; default: $(\"#tenantName\").bsSuggest(\"disable\"); Feng.log(selectType); } }); tenantType && $('input:radio[name=\"tenantType\"][value=\"' + tenantType + '\"]').prop(\"checked\", \"checked\").trigger(\"change\"); //初始化租户校验 $(\"#tenantName\").rules(\"remove\"); $(\"#tenantName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 租户名称不能为空\", minlength: \" 租户用户名称至少1个字符\", maxlength: \" 租户用户名称至多50个字符\" } }); } }, /** * PUT 请求更新车辆类型 */ updateJson: function () { //校验通过再提交 if (!$(\"#updateForm\").valid()) { return Feng.info(\"校验失败,请先核实数据!\"); } //表单序列化 var updateParamObj = $(\"#updateForm\").serializeObject(); //更新 $.ajax({ url: Feng.ctxPath + \"/system/vehicleType/update.json\", contentType: \"application/json\", data: JSON.stringify(updateParamObj), dataType: \"json\", processData: false, type: \"PUT\", success: function (responseJson, textStatus) { if (responseJson.code == 0) { //父窗口更新后关闭当前页面 parent.indexInstance.method.refresh(); updateInstance.method.cancel(); Feng.success(\"更新成功!\"); } else { Feng.info(responseJson.message); } }, error: function (XMLHttpRequest, textStatus, errorThrown) { Feng.error(XMLHttpRequest.responseJSON.message); } }); }, /** * 关闭iframe页面 */ cancel: function () { parent.layer.close(parent.layer.getFrameIndex(window.name)); } }, plugins: { ztree: { setting: { callback: { onClick: function (event, treeId, treeNode, clickFlag) { //更新赋值 $(\"#parentIdName\").attr(\"value\", treeNode.name); $(\"#parentId\").val(treeNode.id); //默认选中 var ztreeInstance = updateInstance.plugins.ztree.ztreeInstance; ztreeInstance.checkNode(treeNode, null, true, false); //隐藏更新同步树 $(\"#updateMenuContent\").fadeOut(\"fast\"); }, onCheck: function (event, treeId, treeNode) { //更新赋值 $(\"#parentIdName\").attr(\"value\", treeNode.name); $(\"#parentId\").val(treeNode.id); //默认选中 var ztreeInstance = updateInstance.plugins.ztree.ztreeInstance; ztreeInstance.selectNode(treeNode); //隐藏更新同步树 $(\"#updateMenuContent\").fadeOut(\"fast\"); } }, check: { enable: true, chkStyle: \"radio\", radioType: \"all\" } }, ztreeInstance: null }, validator: { setting: { errorPlacement: function (error, element) { if (element.is(\":radio\") || element.is(\":checkbox\") || element.is(\".bsSuggest-input\") || element.parent().is(\".input-group.date\") || element.parent().is(\".input-daterange.input-group\")) { error.appendTo(element.parent().parent()); } else { error.appendTo(element.parent()); } }, rules: { type: { required: true }, name: { required: true, minlength: 1, maxlength: 50 }, parentIdName: { required: true }, num: { required: true, min: 1 }, state: { required: true } }, messages: { type: { required: \" 类型不能为空\" }, name: { required: \" 名称不能为空\", minlength: \" 名称至少1个字符\", maxlength: \" 名称至多50个字符\" }, parentIdName: { required: \" 上级车辆类型不能为空\" }, num: { required: \" 排序不能为空\", min: \" 排序至少为1\" }, state: { required: \" 状态不能为空\" } } }, validatorInstance: null }, bsSuggest: { ownerEnterpriseNameSetting: { url: Feng.ctxPath + \"/system/enterprise/listCondition.json\", idField: \"id\", keyField: \"entName\", showHeader: true, allowNoKeyword: false, effectiveFields: [\"id\", \"entName\"], effectiveFieldsAlias: { id: \"企业id\", entName: \"企业名称\" }, searchFields: [\"id\", \"entName\"], fnProcessData: function (responseData) { if (!responseData || responseData.code != 0) { return false; } var i, len, data = { value: [] }; len = responseData.data.length; for (i = 0; i Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:30:24 "},"docs/practice/normal/addPage.html":{"url":"docs/practice/normal/addPage.html","title":"addPage","keywords":"","body":"addPage 设计思想: 新增页面作为菜单页面功能的一部分,采用内页窗口模式弹出,但本质上是独立的页面,因此采用尽量简单方式开发新增页面; 找到 role 目录下面的 add.html ,和 vehicleType 目录下面的 add.html,打开左右两个窗口,同时对比查看; 根据实际情况,编写 vehicleType 目录下面的 add.html ; 还未修改 add.js ,因此 add.html 页面请求可能不正确显示,效果如图; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:32:51 "},"docs/practice/normal/addJs.html":{"url":"docs/practice/normal/addJs.html","title":"addJs","keywords":"","body":"addJs 找到 role 目录下面的 add.js ,和 vehicleType 目录下面的 add.js,打开左右两个窗口,同时对比查看; 根据实际情况,编写 vehicleType 目录下面的 add.js ; 调试完成, add.html 页面正确显示,效果如图; add.js /** * 新增实例对象 * * @author snowdreams1006 * @date 2018-08-07 */ var addInstance = { data: { isAdmin: false }, method: { /** * 初始化新增同步树 */ initAddSyncTree: function (onSuccess) { //同步获取必须传入回调函数 if (!onSuccess || !$.isFunction(onSuccess)) { return Feng.error(\"请传入成功回调函数\"); } //同步获取新增同步树 $.ajax({ url: Feng.ctxPath + \"/system/vehicleType/syncTree.json\", contentType: \"application/json\", dataType: \"json\", type: \"GET\", success: function (responseData, textStatus) { if (responseData.code == 0) { var root = responseData.data; onSuccess(root); } else { Feng.info(responseData.message); } }, error: function (XMLHttpRequest, textStatus, errorThrown) { Feng.error(XMLHttpRequest.responseJSON.message); } }); }, /** * 显示新增同步树 */ showAddSyncTree: function () { var parentIdNameDom = $(\"#parentIdName\"); $(\"#addMenuContent\").css({ left: parentIdNameDom.offset().left + \"px\", top: parentIdNameDom.offset().top + parentIdNameDom.outerHeight() + \"px\" }).slideDown(\"fast\"); $(\"body\").bind(\"mousedown\", addInstance.method.onBodyDown); }, /** * body键盘按下隐藏新增同步树 */ onBodyDown: function (event) { var showingFlag = (event.target.id == \"menuBtn\" || event.target.id == \"parentIdName\" || event.target.id == \"addMenuContent\" || $(event.target).parents(\"#addMenuContent\").length > 0); if (!showingFlag) { addInstance.method.hideAddSyncTree(); } }, /** * 隐藏新增同步树 */ hideAddSyncTree: function (event) { $(\"#addMenuContent\").fadeOut(\"fast\"); $(\"body\").unbind(\"mousedown\", addInstance.method.onBodyDown); }, /** * 初始化 */ init: function () { //获取用户基本信息 addInstance.data.isAdmin = JSON.parse($(\"#isAdmin\").val()) || false; //初始化类型 var type = $(\"#type\").data(\"radio-value\"); type && $('input:radio[name=\"type\"][value=\"' + type + '\"]').prop(\"checked\", \"checked\"); //初始化状态 var state = $(\"#state\").data(\"radio-value\"); state && $('input:radio[name=\"state\"][value=\"' + state + '\"]').prop(\"checked\", \"checked\"); //初始化隐藏状态的新增同步树 addInstance.method.initAddSyncTree(function (root) { //初始化ztree设置 var ztreeSetting = {}; ztreeSetting = $.extend(true, ztreeSetting, Default.ztree.setting, addInstance.plugins.ztree.setting); //初始化新增同步树 addInstance.plugins.ztree.ztreeInstance = $.fn.zTree.init($(\"#addSyncTree\"), ztreeSetting, root); //初始化选中顶级车辆类型 var ztreeInstance = addInstance.plugins.ztree.ztreeInstance; var rootNode = ztreeInstance.getNodeByParam(\"id\", 0, null); if (rootNode) { ztreeInstance.checkNode(rootNode, true, true, true); } }); //初始化新增表单校验 var validatorSetting = {}; validatorSetting = $.extend(true, validatorSetting, addInstance.plugins.validator.setting); addInstance.plugins.validator.validatorInstance = $(\"#addForm\").validate(validatorSetting); //初始化有\"管理员\"车辆类型的专属功能 var isAdmin = addInstance.data.isAdmin; if (isAdmin) { //初始化管理员所有者企业搜索 var ownerEnterpriseNameSetting = $.extend(true, {}, Default.bsSuggest.setting, addInstance.plugins.bsSuggest.ownerEnterpriseNameSetting); $(\"#ownerEnterpriseName\").bsSuggest(ownerEnterpriseNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充所有者企业 id var ownerEnterpriseId = selectedRawData.id; $(\"#ownerEnterpriseId\").val(ownerEnterpriseId); }); //初始化所有者企业校验 $(\"#ownerEnterpriseName\").rules(\"remove\"); $(\"#ownerEnterpriseName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 所有者企业名称不能为空\", minlength: \" 所有者企业名称至少1个字符\", maxlength: \" 所有者企业名称至多50个字符\" } }); //初始化管理员所有者用户搜索 var ownerUserNameSetting = $.extend(true, {}, Default.bsSuggest.setting, addInstance.plugins.bsSuggest.ownerUserNameSetting); $(\"#ownerUserName\").bsSuggest(ownerUserNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充所有者用户 id var ownerUserId = selectedRawData.id; $(\"#ownerUserId\").val(ownerUserId); }); //初始化所有者用户校验 $(\"#ownerUserName\").rules(\"remove\"); $(\"#ownerUserName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 所有者用户名称不能为空\", minlength: \" 所有者用户名称至少1个字符\", maxlength: \" 所有者用户名称至多50个字符\" } }); //初始化租户类型并监听onchange事件 var tenantType = $(\"#tenantType\").data(\"radio-value\"); $('input:radio[name=\"tenantType\"]').change(function () { var selectType = parseInt($(this).val()); switch (selectType) { case 1: //更新管理员租户(企业租户)搜索 $(\"#tenantName\").bsSuggest(\"destroy\"); $(\"#tenantName\").bsSuggest(ownerEnterpriseNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充租户 id var tenantId = selectedRawData.id; $(\"#tenantId\").val(tenantId); }); break; case 2: //更新管理员租户(个人租户)搜索 $(\"#tenantName\").bsSuggest(\"destroy\"); $(\"#tenantName\").bsSuggest(ownerUserNameSetting).on('onSetSelectValue', function (e, selectedData, selectedRawData) { //自动填充租户 id var tenantId = selectedRawData.id; $(\"#tenantId\").val(tenantId); }); break; default: $(\"#tenantName\").bsSuggest(\"disable\"); Feng.log(selectType); } }); tenantType && $('input:radio[name=\"tenantType\"][value=\"' + tenantType + '\"]').prop(\"checked\", \"checked\").trigger(\"change\"); //初始化租户校验 $(\"#tenantName\").rules(\"remove\"); $(\"#tenantName\").rules(\"add\", { required: true, minlength: 1, maxlength: 50, messages: { required: \" 租户名称不能为空\", minlength: \" 租户用户名称至少1个字符\", maxlength: \" 租户用户名称至多50个字符\" } }); } }, /** * POST 请求新增车辆类型 */ addJson: function () { //校验通过再提交 if (!$(\"#addForm\").valid()) { return Feng.info(\"校验失败,请先核实数据!\"); } //表单序列化 var addParamObj = $(\"#addForm\").serializeObject(); //新增 $.ajax({ url: Feng.ctxPath + \"/system/vehicleType/add.json\", contentType: \"application/json\", data: JSON.stringify(addParamObj), dataType: \"json\", processData: false, type: \"POST\", success: function (responseJson, textStatus) { if (responseJson.code == 0) { //父窗口更新后关闭当前页面 parent.indexInstance.method.refresh(); addInstance.method.cancel(); Feng.success(\"新增成功!\"); } else { Feng.info(responseJson.message); } }, error: function (XMLHttpRequest, textStatus, errorThrown) { Feng.error(XMLHttpRequest.responseJSON.message); } }); }, /** * 关闭iframe新增页面 */ cancel: function () { parent.layer.close(parent.layer.getFrameIndex(window.name)); } }, plugins: { ztree: { setting: { callback: { onClick: function (event, treeId, treeNode, clickFlag) { //更新赋值 $(\"#parentIdName\").attr(\"value\", treeNode.name); $(\"#parentId\").val(treeNode.id); //默认选中 var ztreeInstance = addInstance.plugins.ztree.ztreeInstance; ztreeInstance.checkNode(treeNode, null, true, false); //隐藏新增同步树 $(\"#addMenuContent\").fadeOut(\"fast\"); }, onCheck: function (event, treeId, treeNode) { //更新赋值 $(\"#parentIdName\").attr(\"value\", treeNode.name); $(\"#parentId\").val(treeNode.id); //默认选中 var ztreeInstance = addInstance.plugins.ztree.ztreeInstance; ztreeInstance.selectNode(treeNode); //隐藏新增同步树 $(\"#addMenuContent\").fadeOut(\"fast\"); } }, check: { enable: true, chkStyle: \"radio\", radioType: \"all\" } }, ztreeInstance: null }, validator: { setting: { errorPlacement: function (error, element) { if (element.is(\":radio\") || element.is(\":checkbox\") || element.is(\".bsSuggest-input\") || element.parent().is(\".input-group.date\") || element.parent().is(\".input-daterange.input-group\")) { error.appendTo(element.parent().parent()); } else { error.appendTo(element.parent()); } }, rules: { type: { required: true }, name: { required: true, minlength: 1, maxlength: 50 }, parentIdName: { required: true }, num: { required: true, min: 1 }, state: { required: true } }, messages: { type: { required: \" 类型不能为空\" }, name: { required: \" 名称不能为空\", minlength: \" 名称至少1个字符\", maxlength: \" 名称至多50个字符\" }, parentIdName: { required: \" 上级车辆类型不能为空\" }, num: { required: \" 排序不能为空\", min: \" 排序至少为1\" }, state: { required: \" 状态不能为空\" } } }, validatorInstance: null }, bsSuggest: { ownerEnterpriseNameSetting: { url: Feng.ctxPath + \"/system/enterprise/listCondition.json\", idField: \"id\", keyField: \"entName\", showHeader: true, allowNoKeyword: false, effectiveFields: [\"id\", \"entName\"], effectiveFieldsAlias: { id: \"企业id\", entName: \"企业名称\" }, searchFields: [\"id\", \"entName\"], fnProcessData: function (responseData) { if (!responseData || responseData.code != 0) { return false; } var i, len, data = { value: [] }; len = responseData.data.length; for (i = 0; i Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-08 12:40:03 "},"docs/practice/smart.html":{"url":"docs/practice/smart.html","title":"敏捷开发","keywords":"","body":"敏捷开发 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-07 20:43:28 "},"docs/rule/":{"url":"docs/rule/","title":"开发规范","keywords":"","body":"开发规范 !> 假设我们已存在一张 User 表，且已有对应的实体类 User，实现 User 表的 CRUD 操作我们需要做什么呢？ ?> AR 模式提供了一种更加便捷的方式实现 CRUD 操作，其本质还是调用的 Mybatis 对应的方法，类似于语法糖。 1.创建企业是默认所有者-用户 2.已创建的企业负责人所有者信息不对 mybatis-plus: # 如果是放在src/main/java目录下 classpath:/com/yourpackage/*/mapper/*Mapper.xml # 如果是放在resource目录 classpath:/mapper/*Mapper.xml mapper-locations: classpath:/mapper/*Mapper.xml #实体扫描，多个package用逗号或者分号分隔 typeAliasesPackage: com.yourpackage.*.entity global-config: #主键类型 0:\"数据库ID自增\", 1:\"用户输入ID\",2:\"全局唯一ID (数字类型唯一ID)\", 3:\"全局唯一ID UUID\"; id-type: 3 #字段策略 0:\"忽略判断\",1:\"非 NULL 判断\"),2:\"非空判断\" field-strategy: 2 #驼峰下划线转换 db-column-underline: true #mp2.3+ 全局表前缀 mp_ #table-prefix: mp_ #刷新mapper 调试神器 #refresh-mapper: true #数据库大写下划线转换 #capital-mode: true # Sequence序列接口实现类配置 key-generator: com.baomidou.mybatisplus.incrementer.OracleKeyGenerator #逻辑删除配置（下面3个配置） logic-delete-value: 1 logic-not-delete-value: 0 sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector #自定义填充策略接口实现 meta-object-handler: com.baomidou.springboot.MyMetaObjectHandler configuration: #配置返回数据库(column下划线命名&&返回java实体是驼峰命名)，自动匹配无需as（没开启这个，SQL需要写as： select user_id as userId） map-underscore-to-camel-case: true cache-enabled: false #配置JdbcTypeForNull, oracle数据库必须配置 jdbc-type-for-null: 'null' 值 描述 IdType.AUTO 数据库ID自增 IdType.INPUT 用户输入ID IdType.ID_WORKER 全局唯一ID，内容为空自动填充（默认配置） IdType.UUID 全局唯一ID，内容为空自动填充 企业信息: \"企业负责人\"角色默认为企业紧急联系人,有且只有一个企业负责人,账号是紧急联系人手机号; 角色信息: \"管理员\"角色规则:以\"admin_\"开头,例如超级平台方: admin_super_platform 开发者平台方: admin_platform_developer 接口管理员: admin_platform_developer_api 开发管理员: admin_platform_developer_develop 基础管理员: admin_platform_developer_base 系统管理员: admin_platform_developer_system 系统基础管理员: admin_platform_developer_system_base 系统高级管理员: admin_platform_developer_system_advance 浙江省平台方: admin_platform_zhejiang 宁波市平台方: admin_platform_zhejiang_ningbo 宁波市危化品平台: admin_platform_zhejiang_ningbo_whp 宁波市危化品承运方: zhejiang_ningbo_whp_carrier 宁波市危化品货主: zhejiang_ningbo_whp_consignor ... 宁波市集卡平台: admin_platform_zhejiang_ningbo_jk 宁波市货代管理员: zhejiang_ningbo_jk_hd 宁波市货代操作: zhejiang_ningbo_jk_forwarder_operator 宁波市货代调度: zhejiang_ningbo_jk_forwarder_scheduling 宁波市车队管理员: zhejiang_ningbo_jk_motorcade 宁波市车队司机: zhejiang_ningbo_jk_motorcade_driver ... 企业内部角色不受此规则显示,由企业内部员工自定义,每个企业只有唯一一个负责人,拥有企业最高权限; Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-17 15:38:40 "},"docs/rule/module.html":{"url":"docs/rule/module.html","title":"模块规范","keywords":"","body":"模块规范 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/rule/project.html":{"url":"docs/rule/project.html","title":"工程规范","keywords":"","body":"工程规范 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/rule/domain.html":{"url":"docs/rule/domain.html","title":"领域规范","keywords":"","body":"领域规范 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/rule/test.html":{"url":"docs/rule/test.html","title":"测试规范","keywords":"","body":"测试规范 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/rule/api.html":{"url":"docs/rule/api.html","title":"接口规范","keywords":"","body":"接口规范 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance.README.html":{"url":"docs/advance.README.html","title":"开始进阶","keywords":"","body":"开始进阶 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/access.html":{"url":"docs/advance/access.html","title":"功能权限","keywords":"","body":"功能权限 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/data.html":{"url":"docs/advance/data.html","title":"数据权限","keywords":"","body":"数据权限 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/server.html":{"url":"docs/advance/server.html","title":"后端用法","keywords":"","body":"后端用法 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/client.html":{"url":"docs/advance/client.html","title":"前端用法","keywords":"","body":"前端用法 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/custom.html":{"url":"docs/advance/custom.html","title":"高级用法","keywords":"","body":"高级用法 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/paging.html":{"url":"docs/advance/paging.html","title":"分页插件","keywords":"","body":"分页插件 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/optimistic.html":{"url":"docs/advance/optimistic.html","title":"乐观锁插件","keywords":"","body":"乐观锁插件 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/autofill.html":{"url":"docs/advance/autofill.html","title":"公共字段自动填充","keywords":"","body":"公共字段自动填充 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/logic.html":{"url":"docs/advance/logic.html","title":"逻辑删除","keywords":"","body":"逻辑删除 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/advance/tenant.html":{"url":"docs/advance/tenant.html","title":"多租户解析","keywords":"","body":"多租户解析 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/":{"url":"docs/reading/","title":"进阶阅读","keywords":"","body":"进阶阅读 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/maven.html":{"url":"docs/reading/maven.html","title":"maven 简介","keywords":"","body":"maven 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/springboot.html":{"url":"docs/reading/springboot.html","title":"springboot 简介","keywords":"","body":"springboot 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/shiro.html":{"url":"docs/reading/shiro.html","title":"shiro 简介","keywords":"","body":"shiro 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/mybaits-plus.html":{"url":"docs/reading/mybaits-plus.html","title":"mybaits-plus 简介","keywords":"","body":"mybaits-plus 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/ibeetl.html":{"url":"docs/reading/ibeetl.html","title":"ibeetl 简介","keywords":"","body":"ibeetl 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/hplus.html":{"url":"docs/reading/hplus.html","title":"h+ 简介","keywords":"","body":"h+ 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/svn.html":{"url":"docs/reading/svn.html","title":"svn 简介","keywords":"","body":"svn 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/reading/git.html":{"url":"docs/reading/git.html","title":"git 简介","keywords":"","body":"git 简介 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/custom/":{"url":"docs/custom/","title":"高级配置","keywords":"","body":"高级配置 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/custom/project.html":{"url":"docs/custom/project.html","title":"项目配置","keywords":"","body":"项目配置 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/custom/access.html":{"url":"docs/custom/access.html","title":"权限配置","keywords":"","body":"权限配置 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/custom/client.html":{"url":"docs/custom/client.html","title":"前端配置","keywords":"","body":"前端配置 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/custom/template.html":{"url":"docs/custom/template.html","title":"模板配置","keywords":"","body":"模板配置 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/mind/":{"url":"docs/mind/","title":"设计思想","keywords":"","body":"设计思想 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/mind/module.html":{"url":"docs/mind/module.html","title":"模块划分","keywords":"","body":"模块划分 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/mind/access.html":{"url":"docs/mind/access.html","title":"功能权限","keywords":"","body":"功能权限 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/mind/data.html":{"url":"docs/mind/data.html","title":"数据权限","keywords":"","body":"数据权限 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/issue/":{"url":"docs/issue/","title":"常见问题FAQ","keywords":"","body":"常见问题FAQ Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/other.README.html":{"url":"docs/other.README.html","title":"其他","keywords":"","body":"其他 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/oter.contact.html":{"url":"docs/oter.contact.html","title":"联系作者","keywords":"","body":"联系作者 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/other.donate.html":{"url":"docs/other.donate.html","title":"捐赠支持","keywords":"","body":"捐赠支持 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"docs/other/log.html":{"url":"docs/other/log.html","title":"更新日志","keywords":"","body":"更新日志 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:21:51 "},"Glossary.html":{"url":"Glossary.html","keywords":"","body":"电子书 电子书是指将文字、图片、声音、影像等讯息内容数字化的出版物和植入或下载数字化文字、图片、声音、影像等讯息内容的集存储和显示终端于一体的手持阅读器。 Kindle Amazon Kindle 是由 Amazon 设计和销售的电子书阅读器（以及软件平台）。用户可以通过无线网络使用 Amazon Kindle 购买、下载和阅读电子书、报纸、杂志、博客及其他电子媒体。 Copyright © snowdreams1006 2018 all right reserved，powered by Gitbook该文件修订时间： 2018-08-06 21:55:20 "}}